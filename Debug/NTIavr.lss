
NTIavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00002c4e  00002ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800212  00800212  00002e94  2**0
                  ALLOC
  3 .stab         0000531c  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e88  00000000  00000000  000081b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a40c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000ca1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000deec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000100f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_10>
      2c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 15 	call	0x2ace	; 0x2ace <main>
      8a:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 5f       	subi	r30, 0xFE	; 254
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Fan_Control>:
void Fan_Control (void)
{
	static u16 x=0;
	u16 temp=0;
	static u32 z=0;
	z++;
     eea:	80 91 12 02 	lds	r24, 0x0212
     eee:	90 91 13 02 	lds	r25, 0x0213
     ef2:	a0 91 14 02 	lds	r26, 0x0214
     ef6:	b0 91 15 02 	lds	r27, 0x0215
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	a1 1d       	adc	r26, r1
     efe:	b1 1d       	adc	r27, r1
     f00:	80 93 12 02 	sts	0x0212, r24
     f04:	90 93 13 02 	sts	0x0213, r25
     f08:	a0 93 14 02 	sts	0x0214, r26
     f0c:	b0 93 15 02 	sts	0x0215, r27

	if(z==2000)
     f10:	80 5d       	subi	r24, 0xD0	; 208
     f12:	97 40       	sbci	r25, 0x07	; 7
     f14:	a0 40       	sbci	r26, 0x00	; 0
     f16:	b0 40       	sbci	r27, 0x00	; 0
     f18:	01 f5       	brne	.+64     	; 0xf5a <Fan_Control+0x70>
	{
	temp=H_KeyPad_U8_KeyPadRead();
     f1a:	0e 94 1d 14 	call	0x283a	; 0x283a <H_KeyPad_U8_KeyPadRead>
	x=M_ADC_U16_ADCRead();
     f1e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <M_ADC_U16_ADCRead>
     f22:	90 93 17 02 	sts	0x0217, r25
     f26:	80 93 16 02 	sts	0x0216, r24
	H_LCD_Void_LCDClr();
     f2a:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
	H_LCD_Void_LCDWriteString("ADC=");
     f2e:	80 e6       	ldi	r24, 0x60	; 96
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
	H_Lcd_Void_WriteDecimal(x);
     f36:	60 91 16 02 	lds	r22, 0x0216
     f3a:	70 91 17 02 	lds	r23, 0x0217
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f46:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <H_Lcd_Void_WriteDecimal>
	temp=0;
	z=0;
     f4a:	10 92 12 02 	sts	0x0212, r1
     f4e:	10 92 13 02 	sts	0x0213, r1
     f52:	10 92 14 02 	sts	0x0214, r1
     f56:	10 92 15 02 	sts	0x0215, r1
	}
	if(x>=0 && x<200)
     f5a:	20 91 16 02 	lds	r18, 0x0216
     f5e:	30 91 17 02 	lds	r19, 0x0217
     f62:	28 3c       	cpi	r18, 0xC8	; 200
     f64:	31 05       	cpc	r19, r1
     f66:	20 f4       	brcc	.+8      	; 0xf70 <Fan_Control+0x86>
	{
		M_Timer0_Void_SetFastPWM(0);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_Timer0_Void_SetFastPWM>
     f6e:	08 95       	ret
	}
	else if(x>=200 && x<250)
     f70:	c9 01       	movw	r24, r18
     f72:	88 5c       	subi	r24, 0xC8	; 200
     f74:	90 40       	sbci	r25, 0x00	; 0
     f76:	c2 97       	sbiw	r24, 0x32	; 50
     f78:	20 f4       	brcc	.+8      	; 0xf82 <Fan_Control+0x98>
	{
		M_Timer0_Void_SetFastPWM(25);
     f7a:	89 e1       	ldi	r24, 0x19	; 25
     f7c:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_Timer0_Void_SetFastPWM>
     f80:	08 95       	ret
	}
	else if (x>=250 && x<1023)
     f82:	c9 01       	movw	r24, r18
     f84:	8a 5f       	subi	r24, 0xFA	; 250
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	85 50       	subi	r24, 0x05	; 5
     f8a:	93 40       	sbci	r25, 0x03	; 3
     f8c:	18 f4       	brcc	.+6      	; 0xf94 <Fan_Control+0xaa>
	{
		M_Timer0_Void_SetFastPWM(80);
     f8e:	80 e5       	ldi	r24, 0x50	; 80
     f90:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_Timer0_Void_SetFastPWM>
     f94:	08 95       	ret

00000f96 <led_control>:

#include "Led_Control.h"

void led_control (void)
{
	H_Led_Void_LedInit(BLU_LED);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
	H_Led_Void_LedInit(RED_LED);
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
	H_Led_Void_LedInit(GRN_LED);
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
//	}

	while(x)
	{

		push_button = H_KeyPad_U8_KeyPadRead();
     fa8:	0e 94 1d 14 	call	0x283a	; 0x283a <H_KeyPad_U8_KeyPadRead>

		switch (push_button)
     fac:	82 33       	cpi	r24, 0x32	; 50
     fae:	41 f1       	breq	.+80     	; 0x1000 <led_control+0x6a>
     fb0:	83 33       	cpi	r24, 0x33	; 51
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <led_control+0x20>
     fb4:	47 c0       	rjmp	.+142    	; 0x1044 <led_control+0xae>
     fb6:	81 33       	cpi	r24, 0x31	; 49
     fb8:	09 f0       	breq	.+2      	; 0xfbc <led_control+0x26>
     fba:	65 c0       	rjmp	.+202    	; 0x1086 <led_control+0xf0>
			{
			case '1':H_Led_Void_LedTog(BLU_LED);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 cc 10 	call	0x2198	; 0x2198 <H_Led_Void_LedTog>
					 H_LCD_Void_LCDClr();
     fc2:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
					 if(M_Dio_U8_PinRead(Blu_Led_Pin)==1)
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	39 f4       	brne	.+14     	; 0xfde <led_control+0x48>
					 {
						 H_LCD_Void_LCDWriteString("Blue LED ON");
     fd0:	85 e6       	ldi	r24, 0x65	; 101
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
     fd8:	20 e1       	ldi	r18, 0x10	; 16
     fda:	37 e2       	ldi	r19, 0x27	; 39
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <led_control+0x54>
					 }
					 else
					 {
						 H_LCD_Void_LCDWriteString("Blue LED OFF");
     fde:	81 e7       	ldi	r24, 0x71	; 113
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
     fe6:	20 e1       	ldi	r18, 0x10	; 16
     fe8:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fea:	40 e9       	ldi	r20, 0x90	; 144
     fec:	51 e0       	ldi	r21, 0x01	; 1
     fee:	ca 01       	movw	r24, r20
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <led_control+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff8:	d1 f7       	brne	.-12     	; 0xfee <led_control+0x58>
					 }

					 _delay_ms(1000);
					 H_LCD_Void_LCDClr();
     ffa:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
     ffe:	08 95       	ret
			break;
			case '2':H_Led_Void_LedTog(GRN_LED);
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 cc 10 	call	0x2198	; 0x2198 <H_Led_Void_LedTog>
					 H_LCD_Void_LCDClr();
    1006:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
					 if(M_Dio_U8_PinRead(Grn_Led_Pin)==1)
    100a:	8f e1       	ldi	r24, 0x1F	; 31
    100c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	39 f4       	brne	.+14     	; 0x1022 <led_control+0x8c>
					 {
						 H_LCD_Void_LCDWriteString("GRN LED ON");
    1014:	8e e7       	ldi	r24, 0x7E	; 126
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    101c:	20 e1       	ldi	r18, 0x10	; 16
    101e:	37 e2       	ldi	r19, 0x27	; 39
    1020:	06 c0       	rjmp	.+12     	; 0x102e <led_control+0x98>
					 }
					 else
					 {
						 H_LCD_Void_LCDWriteString("GRN LED OFF");
    1022:	89 e8       	ldi	r24, 0x89	; 137
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    102a:	20 e1       	ldi	r18, 0x10	; 16
    102c:	37 e2       	ldi	r19, 0x27	; 39
    102e:	40 e9       	ldi	r20, 0x90	; 144
    1030:	51 e0       	ldi	r21, 0x01	; 1
    1032:	ca 01       	movw	r24, r20
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <led_control+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	d1 f7       	brne	.-12     	; 0x1032 <led_control+0x9c>
					 }
					 _delay_ms(1000);
					 H_LCD_Void_LCDClr();
    103e:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
    1042:	08 95       	ret
					 break;
			case '3':H_Led_Void_LedTog(RED_LED);
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	0e 94 cc 10 	call	0x2198	; 0x2198 <H_Led_Void_LedTog>
					 H_LCD_Void_LCDClr();
    104a:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
					 if(M_Dio_U8_PinRead(Red_Led_Pin)==1)
    104e:	8e e1       	ldi	r24, 0x1E	; 30
    1050:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	39 f4       	brne	.+14     	; 0x1066 <led_control+0xd0>
					 {
						 H_LCD_Void_LCDWriteString("RED LED ON");
    1058:	85 e9       	ldi	r24, 0x95	; 149
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    1060:	20 e1       	ldi	r18, 0x10	; 16
    1062:	37 e2       	ldi	r19, 0x27	; 39
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <led_control+0xdc>
					 }
					 else
					 {
						 H_LCD_Void_LCDWriteString("RED LED OFF");
    1066:	80 ea       	ldi	r24, 0xA0	; 160
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    106e:	20 e1       	ldi	r18, 0x10	; 16
    1070:	37 e2       	ldi	r19, 0x27	; 39
    1072:	40 e9       	ldi	r20, 0x90	; 144
    1074:	51 e0       	ldi	r21, 0x01	; 1
    1076:	ca 01       	movw	r24, r20
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <led_control+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	d1 f7       	brne	.-12     	; 0x1076 <led_control+0xe0>
					 }
					 _delay_ms(1000);
					 H_LCD_Void_LCDClr();
    1082:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
    1086:	08 95       	ret

00001088 <PassWord>:
 *      Author: 20101
 */

#include "PassWord.h"
void PassWord (void)
{
    1088:	2f 92       	push	r2
    108a:	3f 92       	push	r3
    108c:	4f 92       	push	r4
    108e:	5f 92       	push	r5
    1090:	6f 92       	push	r6
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <PassWord+0x26>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <PassWord+0x28>
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	u8 pass[4]="3377", pass_check[4]={0},pass_flag=0,pass_temp=0,x=1;
    10b6:	0f 2e       	mov	r0, r31
    10b8:	f3 e3       	ldi	r31, 0x33	; 51
    10ba:	2f 2e       	mov	r2, r31
    10bc:	f0 2d       	mov	r31, r0
    10be:	19 82       	std	Y+1, r1	; 0x01
    10c0:	1a 82       	std	Y+2, r1	; 0x02
    10c2:	1b 82       	std	Y+3, r1	; 0x03
    10c4:	1c 82       	std	Y+4, r1	; 0x04
	H_LCD_Void_LCDWriteString("Enter Password");
    10c6:	8c ea       	ldi	r24, 0xAC	; 172
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    10ce:	bb 24       	eor	r11, r11
			{

				static u8 pass_attempt=0;
				H_LCD_Void_LCDClr();
				H_LCD_Void_LCDWriteString("Wrong Password");
				H_LCD_Void_LCDGoto(1,0);
    10d0:	55 24       	eor	r5, r5
    10d2:	0f 2e       	mov	r0, r31
    10d4:	f0 e9       	ldi	r31, 0x90	; 144
    10d6:	cf 2e       	mov	r12, r31
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	df 2e       	mov	r13, r31
    10dc:	f0 2d       	mov	r31, r0
					H_LCD_Void_LCDWriteString("w8 1 min");
					_delay_ms(1000);
					for (int x =0;x<60;x++)
					{
						H_LCD_Void_LCDClr();
						H_Lcd_Void_WriteDecimal(x);
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	97 e2       	ldi	r25, 0x27	; 39
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	39 2e       	mov	r3, r25
						x = 1;

						while(x)
						{

							pass_check[i] = H_KeyPad_U8_KeyPadRead();
    10e6:	4e 01       	movw	r8, r28
    10e8:	08 94       	sec
    10ea:	81 1c       	adc	r8, r1
    10ec:	91 1c       	adc	r9, r1
    10ee:	c4 01       	movw	r24, r8
    10f0:	78 2c       	mov	r7, r8
    10f2:	69 2e       	mov	r6, r25
							{
								H_LCD_Void_LCDClr();
								//H_LCD_Void_LCDGoto(LCD_1st_Row_command, i);
								H_LCD_Void_LCDWriteString(pass_check);
								x = 0;
								pass_flag++;
    10f4:	a5 2c       	mov	r10, r5
//						H_LCD_Void_LCDClr();
//						H_LCD_Void_LCDWriteString(pass_check);
//
//					}

			for(int i = 0; i < 4; i++)
    10f6:	44 24       	eor	r4, r4
    10f8:	43 94       	inc	r4

	while (pass_flag!=5)
		{


			if ((pass[0]==pass_check[0])&&(pass[1]==pass_check[1])&&(pass[2]==pass_check[2])&&(pass[3]==pass_check[3]) )
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	82 15       	cp	r24, r2
    10fe:	09 f0       	breq	.+2      	; 0x1102 <PassWord+0x7a>
    1100:	55 c0       	rjmp	.+170    	; 0x11ac <PassWord+0x124>
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	83 33       	cpi	r24, 0x33	; 51
    1106:	09 f0       	breq	.+2      	; 0x110a <PassWord+0x82>
    1108:	51 c0       	rjmp	.+162    	; 0x11ac <PassWord+0x124>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	87 33       	cpi	r24, 0x37	; 55
    110e:	09 f0       	breq	.+2      	; 0x1112 <PassWord+0x8a>
    1110:	4d c0       	rjmp	.+154    	; 0x11ac <PassWord+0x124>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	87 33       	cpi	r24, 0x37	; 55
    1116:	09 f0       	breq	.+2      	; 0x111a <PassWord+0x92>
    1118:	ca c0       	rjmp	.+404    	; 0x12ae <PassWord+0x226>
			//if(!(strcmp(pass,pass_check)))
			{
				H_Led_Void_LedInit(BLU_LED);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
				H_Led_Void_LedInit(GRN_LED);
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
				H_Led_Void_LedInit(RED_LED);
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	0e 94 26 11 	call	0x224c	; 0x224c <H_Led_Void_LedInit>
				H_LCD_Void_LCDClr();
    112c:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
				H_LCD_Void_LCDWriteString("Welcome Sir");
    1130:	8b eb       	ldi	r24, 0xBB	; 187
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    1138:	80 e1       	ldi	r24, 0x10	; 16
    113a:	97 e2       	ldi	r25, 0x27	; 39
    113c:	20 e9       	ldi	r18, 0x90	; 144
    113e:	31 e0       	ldi	r19, 0x01	; 1
    1140:	f9 01       	movw	r30, r18
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <PassWord+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	d9 f7       	brne	.-10     	; 0x1140 <PassWord+0xb8>
				_delay_ms(1000);
				H_LCD_Void_LCDClr();
    114a:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
				H_LCD_Void_LCDWriteString("LEDS ON");
    114e:	87 ec       	ldi	r24, 0xC7	; 199
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
				H_Led_Void_LedOn(BLU_LED);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <H_Led_Void_LedOn>
				H_Led_Void_LedOn(GRN_LED);
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <H_Led_Void_LedOn>
				H_Led_Void_LedOn(RED_LED);
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <H_Led_Void_LedOn>
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	97 e2       	ldi	r25, 0x27	; 39
    116c:	20 e9       	ldi	r18, 0x90	; 144
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	f9 01       	movw	r30, r18
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <PassWord+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	d9 f7       	brne	.-10     	; 0x1170 <PassWord+0xe8>
				_delay_ms(1000);
				H_LCD_Void_LCDClr();
    117a:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
				H_LCD_Void_LCDWriteString("LEDS OFF");
    117e:	8f ec       	ldi	r24, 0xCF	; 207
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
				H_Led_Void_LedOff(BLU_LED);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 de 10 	call	0x21bc	; 0x21bc <H_Led_Void_LedOff>
				H_Led_Void_LedOff(GRN_LED);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	0e 94 de 10 	call	0x21bc	; 0x21bc <H_Led_Void_LedOff>
				H_Led_Void_LedOff(RED_LED);
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	0e 94 de 10 	call	0x21bc	; 0x21bc <H_Led_Void_LedOff>
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	97 e2       	ldi	r25, 0x27	; 39
    119c:	20 e9       	ldi	r18, 0x90	; 144
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	f9 01       	movw	r30, r18
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <PassWord+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a8:	d9 f7       	brne	.-10     	; 0x11a0 <PassWord+0x118>
    11aa:	86 c0       	rjmp	.+268    	; 0x12b8 <PassWord+0x230>



				break;
			}
			else if (((pass[0]!=pass_check[0])||(pass[1]!=pass_check[1])||(pass[2]!=pass_check[2])||(pass[3]!=pass_check[3])) && pass_flag==4)
    11ac:	84 e0       	ldi	r24, 0x04	; 4
    11ae:	b8 16       	cp	r11, r24
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <PassWord+0x12c>
    11b2:	79 c0       	rjmp	.+242    	; 0x12a6 <PassWord+0x21e>
			{

				static u8 pass_attempt=0;
				H_LCD_Void_LCDClr();
    11b4:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
				H_LCD_Void_LCDWriteString("Wrong Password");
    11b8:	88 ed       	ldi	r24, 0xD8	; 216
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
				H_LCD_Void_LCDGoto(1,0);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	65 2d       	mov	r22, r5
    11c4:	0e 94 8c 11 	call	0x2318	; 0x2318 <H_LCD_Void_LCDGoto>
				H_LCD_Void_LCDWriteString("Try again");
    11c8:	87 ee       	ldi	r24, 0xE7	; 231
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
				pass_flag=0;
				for(int j=0;j<4;j++)
				{
					pass_check[j]=0;
    11d0:	59 82       	std	Y+1, r5	; 0x01
    11d2:	5a 82       	std	Y+2, r5	; 0x02
    11d4:	5b 82       	std	Y+3, r5	; 0x03
    11d6:	5c 82       	std	Y+4, r5	; 0x04
    11d8:	20 e1       	ldi	r18, 0x10	; 16
    11da:	37 e2       	ldi	r19, 0x27	; 39
    11dc:	c6 01       	movw	r24, r12
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <PassWord+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	d1 f7       	brne	.-12     	; 0x11dc <PassWord+0x154>
				}
				_delay_ms(1000);

				pass_attempt++;
    11e8:	80 91 18 02 	lds	r24, 0x0218
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	80 93 18 02 	sts	0x0218, r24
				while (pass_attempt==3)
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	79 f5       	brne	.+94     	; 0x1254 <PassWord+0x1cc>
				{
					H_LCD_Void_LCDClr();
    11f6:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
					H_LCD_Void_LCDWriteString("w8 1 min");
    11fa:	81 ef       	ldi	r24, 0xF1	; 241
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    1202:	20 e1       	ldi	r18, 0x10	; 16
    1204:	37 e2       	ldi	r19, 0x27	; 39
    1206:	c6 01       	movw	r24, r12
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <PassWord+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	d1 f7       	brne	.-12     	; 0x1206 <PassWord+0x17e>
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
					_delay_ms(1000);
					for (int x =0;x<60;x++)
					{
						H_LCD_Void_LCDClr();
    1216:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
						H_Lcd_Void_WriteDecimal(x);
    121a:	b8 01       	movw	r22, r16
    121c:	88 27       	eor	r24, r24
    121e:	77 fd       	sbrc	r23, 7
    1220:	80 95       	com	r24
    1222:	98 2f       	mov	r25, r24
    1224:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1228:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <H_Lcd_Void_WriteDecimal>
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	93 2d       	mov	r25, r3
    1230:	f6 01       	movw	r30, r12
    1232:	31 97       	sbiw	r30, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <PassWord+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	d9 f7       	brne	.-10     	; 0x1230 <PassWord+0x1a8>
				while (pass_attempt==3)
				{
					H_LCD_Void_LCDClr();
					H_LCD_Void_LCDWriteString("w8 1 min");
					_delay_ms(1000);
					for (int x =0;x<60;x++)
    123a:	0f 5f       	subi	r16, 0xFF	; 255
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	0c 33       	cpi	r16, 0x3C	; 60
    1240:	11 05       	cpc	r17, r1
    1242:	49 f7       	brne	.-46     	; 0x1216 <PassWord+0x18e>
					{
						H_LCD_Void_LCDClr();
						H_Lcd_Void_WriteDecimal(x);
						_delay_ms(1000);
					}
					pass_attempt=0;
    1244:	50 92 18 02 	sts	0x0218, r5
					H_LCD_Void_LCDClr();
    1248:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
					H_LCD_Void_LCDWriteString("Enter Password");
    124c:	8c ea       	ldi	r24, 0xAC	; 172
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
					break;
				}
				H_LCD_Void_LCDClr();
    1254:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
				H_LCD_Void_LCDWriteString("Enter Password");
    1258:	8c ea       	ldi	r24, 0xAC	; 172
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
    1260:	b5 2c       	mov	r11, r5
    1262:	21 c0       	rjmp	.+66     	; 0x12a6 <PassWord+0x21e>
						x = 1;

						while(x)
						{

							pass_check[i] = H_KeyPad_U8_KeyPadRead();
    1264:	84 01       	movw	r16, r8
    1266:	0e 0d       	add	r16, r14
    1268:	1f 1d       	adc	r17, r15
    126a:	0e 94 1d 14 	call	0x283a	; 0x283a <H_KeyPad_U8_KeyPadRead>
    126e:	f8 01       	movw	r30, r16
    1270:	80 83       	st	Z, r24

							if(pass_check[i] !=0)
    1272:	88 23       	and	r24, r24
    1274:	d1 f3       	breq	.-12     	; 0x126a <PassWord+0x1e2>
							{
								H_LCD_Void_LCDClr();
    1276:	0e 94 84 11 	call	0x2308	; 0x2308 <H_LCD_Void_LCDClr>
								//H_LCD_Void_LCDGoto(LCD_1st_Row_command, i);
								H_LCD_Void_LCDWriteString(pass_check);
    127a:	87 2d       	mov	r24, r7
    127c:	96 2d       	mov	r25, r6
    127e:	0e 94 cb 13 	call	0x2796	; 0x2796 <H_LCD_Void_LCDWriteString>
								x = 0;
								pass_flag++;
    1282:	b3 94       	inc	r11
    1284:	8a 2d       	mov	r24, r10

			for(int i = 0; i < 4; i++)
					{
						x = 1;

						while(x)
    1286:	88 23       	and	r24, r24
    1288:	69 f7       	brne	.-38     	; 0x1264 <PassWord+0x1dc>
//						H_LCD_Void_LCDClr();
//						H_LCD_Void_LCDWriteString(pass_check);
//
//					}

			for(int i = 0; i < 4; i++)
    128a:	08 94       	sec
    128c:	e1 1c       	adc	r14, r1
    128e:	f1 1c       	adc	r15, r1
    1290:	f4 e0       	ldi	r31, 0x04	; 4
    1292:	ef 16       	cp	r14, r31
    1294:	f1 04       	cpc	r15, r1
    1296:	14 f4       	brge	.+4      	; 0x129c <PassWord+0x214>
    1298:	84 2d       	mov	r24, r4
    129a:	f5 cf       	rjmp	.-22     	; 0x1286 <PassWord+0x1fe>
void PassWord (void)
{
	u8 pass[4]="3377", pass_check[4]={0},pass_flag=0,pass_temp=0,x=1;
	H_LCD_Void_LCDWriteString("Enter Password");

	while (pass_flag!=5)
    129c:	85 e0       	ldi	r24, 0x05	; 5
    129e:	b8 16       	cp	r11, r24
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <PassWord+0x21c>
    12a2:	2b cf       	rjmp	.-426    	; 0x10fa <PassWord+0x72>
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <PassWord+0x230>

						}
					}

}
}
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	ee 24       	eor	r14, r14
    12aa:	ff 24       	eor	r15, r15
    12ac:	ec cf       	rjmp	.-40     	; 0x1286 <PassWord+0x1fe>



				break;
			}
			else if (((pass[0]!=pass_check[0])||(pass[1]!=pass_check[1])||(pass[2]!=pass_check[2])||(pass[3]!=pass_check[3])) && pass_flag==4)
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	87 33       	cpi	r24, 0x37	; 55
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <PassWord+0x22e>
    12b4:	7b cf       	rjmp	.-266    	; 0x11ac <PassWord+0x124>
    12b6:	f7 cf       	rjmp	.-18     	; 0x12a6 <PassWord+0x21e>

						}
					}

}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	7f 90       	pop	r7
    12dc:	6f 90       	pop	r6
    12de:	5f 90       	pop	r5
    12e0:	4f 90       	pop	r4
    12e2:	3f 90       	pop	r3
    12e4:	2f 90       	pop	r2
    12e6:	08 95       	ret

000012e8 <M_Timer0_Void_Init>:
	#error("Wrong OC0 Mode")
#endif

	//step1 : choose mode
#elif(TIMER0_MODE == TIMER0_FAST_PWM_MODE )
	SetBit(TCCR0_REG,6);
    12e8:	e3 e5       	ldi	r30, 0x53	; 83
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	80 64       	ori	r24, 0x40	; 64
    12f0:	80 83       	st	Z, r24
	SetBit(TCCR0_REG,3);
    12f2:	80 81       	ld	r24, Z
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	80 83       	st	Z, r24

	//step2 : choose OC0 mode
#if(TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_NON_INVERTING || TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_INVERTING)

	TCCR0_REG = (TCCR0_REG & TIMER0_OC0_MODE_MASK) | TIMER0_OC0_PIN_MODE ;
    12f8:	80 81       	ld	r24, Z
    12fa:	80 63       	ori	r24, 0x30	; 48
    12fc:	80 83       	st	Z, r24
#endif

#endif


}
    12fe:	08 95       	ret

00001300 <M_Timer0_Void_StartTimer>:
void M_Timer0_Void_StartTimer(void)
{
	//step3 : choose prescaler   //timer starts once the prescaler is defined
#if(TIMER0_PRESCALER >= 0 && TIMER0_PRESCALER <= 7)
	TCCR0_REG = (TCCR0_REG & TIMER0_PRESCALER_MASK) | TIMER0_PRESCALER;
    1300:	e3 e5       	ldi	r30, 0x53	; 83
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 7f       	andi	r24, 0xF8	; 248
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	80 83       	st	Z, r24
#else
	#error("Wrong prescaler")
#endif
}
    130c:	08 95       	ret

0000130e <M_Timer0_Void_StopTimer>:
void M_Timer0_Void_StopTimer(void)
{
	TCCR0_REG = (TCCR0_REG & TIMER0_PRESCALER_MASK); //Stop counter by clearing prescaler mode pins
    130e:	e3 e5       	ldi	r30, 0x53	; 83
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 7f       	andi	r24, 0xF8	; 248
    1316:	80 83       	st	Z, r24
}
    1318:	08 95       	ret

0000131a <M_Timer0_Void_InterruptEnable>:
void M_Timer0_Void_InterruptEnable(u8 IntID)
{
	switch(IntID)
    131a:	88 23       	and	r24, r24
    131c:	19 f0       	breq	.+6      	; 0x1324 <M_Timer0_Void_InterruptEnable+0xa>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	61 f4       	brne	.+24     	; 0x133a <M_Timer0_Void_InterruptEnable+0x20>
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <M_Timer0_Void_InterruptEnable+0x16>
	{
	case Timer0_OVF_INT_ID :
		SetBit(TIMSK_REG,0);
    1324:	e9 e5       	ldi	r30, 0x59	; 89
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	80 83       	st	Z, r24
    132e:	08 95       	ret
		break;
	case Timer0_CMPMATCH_INT_ID :
		SetBit(TIMSK_REG,1);
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	82 60       	ori	r24, 0x02	; 2
    1338:	80 83       	st	Z, r24
    133a:	08 95       	ret

0000133c <M_Timer0_Void_InterruptDisable>:
	}

}
void M_Timer0_Void_InterruptDisable(u8 IntID)
{
	switch(IntID)
    133c:	88 23       	and	r24, r24
    133e:	19 f0       	breq	.+6      	; 0x1346 <M_Timer0_Void_InterruptDisable+0xa>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	61 f4       	brne	.+24     	; 0x135c <M_Timer0_Void_InterruptDisable+0x20>
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <M_Timer0_Void_InterruptDisable+0x16>
	{
	case Timer0_OVF_INT_ID :
		ClrBit(TIMSK_REG,0);
    1346:	e9 e5       	ldi	r30, 0x59	; 89
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	80 83       	st	Z, r24
    1350:	08 95       	ret
		break;
	case Timer0_CMPMATCH_INT_ID :
		ClrBit(TIMSK_REG,1);
    1352:	e9 e5       	ldi	r30, 0x59	; 89
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8d 7f       	andi	r24, 0xFD	; 253
    135a:	80 83       	st	Z, r24
    135c:	08 95       	ret

0000135e <M_Timer0_Void_SetPreload>:
		break ;
	}
}
void M_Timer0_Void_SetPreload(u8 Copy_U8_Preload)
{
	TCNT0_REG = Copy_U8_Preload;
    135e:	82 bf       	out	0x32, r24	; 50
}
    1360:	08 95       	ret

00001362 <M_Timer0_Void_SetCmpMatch>:
void M_Timer0_Void_SetCmpMatch(u8 Copy_U8_CmpMatch)
{
	OCR0_REG = Copy_U8_CmpMatch;
    1362:	8c bf       	out	0x3c, r24	; 60
}
    1364:	08 95       	ret

00001366 <M_Timer0_Void_SetCallBackFun>:
void M_Timer0_Void_SetCallBackFun(void (*PtrFun)(void) ,u8 IntID)
{
	switch(IntID)
    1366:	66 23       	and	r22, r22
    1368:	19 f0       	breq	.+6      	; 0x1370 <M_Timer0_Void_SetCallBackFun+0xa>
    136a:	61 30       	cpi	r22, 0x01	; 1
    136c:	51 f4       	brne	.+20     	; 0x1382 <M_Timer0_Void_SetCallBackFun+0x1c>
    136e:	05 c0       	rjmp	.+10     	; 0x137a <M_Timer0_Void_SetCallBackFun+0x14>
	{
	case Timer0_OVF_INT_ID :
		PV_CallBack[Timer0_OVF_INT_ID] = PtrFun;
    1370:	90 93 1c 02 	sts	0x021C, r25
    1374:	80 93 1b 02 	sts	0x021B, r24
    1378:	08 95       	ret
		break;
	case Timer0_CMPMATCH_INT_ID :
		PV_CallBack[Timer0_CMPMATCH_INT_ID] = PtrFun;
    137a:	90 93 1e 02 	sts	0x021E, r25
    137e:	80 93 1d 02 	sts	0x021D, r24
    1382:	08 95       	ret

00001384 <__vector_11>:
		break ;
	}
}

ISR(TIMER0_OVF_vect)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
	if(PV_CallBack[Timer0_OVF_INT_ID] != NULL)
    13a6:	e0 91 1b 02 	lds	r30, 0x021B
    13aa:	f0 91 1c 02 	lds	r31, 0x021C
    13ae:	30 97       	sbiw	r30, 0x00	; 0
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__vector_11+0x30>
		PV_CallBack[Timer0_OVF_INT_ID]();
    13b2:	09 95       	icall
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
	if(PV_CallBack[Timer0_CMPMATCH_INT_ID] != NULL )
    13f8:	e0 91 1d 02 	lds	r30, 0x021D
    13fc:	f0 91 1e 02 	lds	r31, 0x021E
    1400:	30 97       	sbiw	r30, 0x00	; 0
    1402:	09 f0       	breq	.+2      	; 0x1406 <__vector_10+0x30>
		PV_CallBack[Timer0_CMPMATCH_INT_ID]();
    1404:	09 95       	icall
}
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <M_Timer0_Void_SetFastPWM>:


void M_Timer0_Void_SetFastPWM(u8 Copy_U8_DutyCycle)
{
    1428:	98 2f       	mov	r25, r24
#if (TIMER0_MODE == TIMER0_FAST_PWM_MODE )
	if(Copy_U8_DutyCycle > 100)
    142a:	85 36       	cpi	r24, 0x65	; 101
    142c:	70 f4       	brcc	.+28     	; 0x144a <M_Timer0_Void_SetFastPWM+0x22>
		return;
#if(TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_NON_INVERTING)
	OCR0_REG = abs(((Copy_U8_DutyCycle * 256) / 100) - 1);
#elif(TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_INVERTING)
	OCR0_REG = abs(255 - ((Copy_U8_DutyCycle * 256) / 100));
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	64 e6       	ldi	r22, 0x64	; 100
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <__divmodhi4>
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	86 1b       	sub	r24, r22
    143e:	97 0b       	sbc	r25, r23
    1440:	1a f4       	brpl	.+6      	; 0x1448 <M_Timer0_Void_SetFastPWM+0x20>
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	8c bf       	out	0x3c, r24	; 60
    144a:	08 95       	ret

0000144c <M_Timer0_Void_SetPhaseCorrectPWM>:
#else
	#error("Wrong OC0 Mode")
#endif

#endif
}
    144c:	08 95       	ret

0000144e <M_Timer1_Void_Init>:
/************************************INPUT_CAPTURE_UNIT_(ICU)_IN_TIMER_1*************************************************************************************/

void M_Timer1_Void_Init(void)
{
	//set timer1 mode  (normal mode)
	ClrBit(TCCR1A_REG,0);
    144e:	ef e4       	ldi	r30, 0x4F	; 79
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8e 7f       	andi	r24, 0xFE	; 254
    1456:	80 83       	st	Z, r24
	ClrBit(TCCR1A_REG,1);
    1458:	80 81       	ld	r24, Z
    145a:	8d 7f       	andi	r24, 0xFD	; 253
    145c:	80 83       	st	Z, r24
	ClrBit(TCCR1B_REG,3);
    145e:	ee e4       	ldi	r30, 0x4E	; 78
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 7f       	andi	r24, 0xF7	; 247
    1466:	80 83       	st	Z, r24
	ClrBit(TCCR1B_REG,4);
    1468:	80 81       	ld	r24, Z
    146a:	8f 7e       	andi	r24, 0xEF	; 239
    146c:	80 83       	st	Z, r24
	//set prescaler
	ClrBit(TCCR1B_REG,0);
    146e:	80 81       	ld	r24, Z
    1470:	8e 7f       	andi	r24, 0xFE	; 254
    1472:	80 83       	st	Z, r24
	SetBit(TCCR1B_REG,1);
    1474:	80 81       	ld	r24, Z
    1476:	82 60       	ori	r24, 0x02	; 2
    1478:	80 83       	st	Z, r24
	ClrBit(TCCR1B_REG,2);
    147a:	80 81       	ld	r24, Z
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	80 83       	st	Z, r24
}
    1480:	08 95       	ret

00001482 <M_Timer1_Void_ICUInit>:
void M_Timer1_Void_ICUInit(void)
{
	//set ICU trigger on rising edge
	SetBit(TCCR1B_REG,6);
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	80 83       	st	Z, r24
}
    148c:	08 95       	ret

0000148e <M_Timer1_Void_Settrigger>:
void M_Timer1_Void_Settrigger(u8 Copy_U8_Trigger)
{
	switch(Copy_U8_Trigger)
    148e:	88 23       	and	r24, r24
    1490:	19 f0       	breq	.+6      	; 0x1498 <M_Timer1_Void_Settrigger+0xa>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	61 f4       	brne	.+24     	; 0x14ae <M_Timer1_Void_Settrigger+0x20>
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <M_Timer1_Void_Settrigger+0x16>
	{
	case Timer1_RISING_EDGE_TRIGGER :
		SetBit(TCCR1B_REG,6);
    1498:	ee e4       	ldi	r30, 0x4E	; 78
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 64       	ori	r24, 0x40	; 64
    14a0:	80 83       	st	Z, r24
    14a2:	08 95       	ret
		break;
	case Timer1_FALLING_EDGE_TRIGGER :
		ClrBit(TCCR1B_REG,6);
    14a4:	ee e4       	ldi	r30, 0x4E	; 78
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7b       	andi	r24, 0xBF	; 191
    14ac:	80 83       	st	Z, r24
    14ae:	08 95       	ret

000014b0 <M_Timer1_Void_InterruptEnable>:
		break;
	}
}
void M_Timer1_Void_InterruptEnable(void)
{
	SetBit(TIMSK_REG,5);
    14b0:	e9 e5       	ldi	r30, 0x59	; 89
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 62       	ori	r24, 0x20	; 32
    14b8:	80 83       	st	Z, r24
}
    14ba:	08 95       	ret

000014bc <M_Timer1_Void_InterruptDisable>:
void M_Timer1_Void_InterruptDisable(void)
{
	ClrBit(TIMSK_REG,5);
    14bc:	e9 e5       	ldi	r30, 0x59	; 89
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 7d       	andi	r24, 0xDF	; 223
    14c4:	80 83       	st	Z, r24
}
    14c6:	08 95       	ret

000014c8 <M_Timer1_Void_SetCallBackFun>:
void M_Timer1_Void_SetCallBackFun(void (*PtrFun)(void))
{
	PV_ICU_CallBack = PtrFun;
    14c8:	90 93 1a 02 	sts	0x021A, r25
    14cc:	80 93 19 02 	sts	0x0219, r24
}
    14d0:	08 95       	ret

000014d2 <M_Timer1_Void_InputCapture>:
u16 M_Timer1_Void_InputCapture(void)
{
	return ICR_REG ;
    14d2:	26 b5       	in	r18, 0x26	; 38
    14d4:	37 b5       	in	r19, 0x27	; 39
}
    14d6:	82 2f       	mov	r24, r18
    14d8:	93 2f       	mov	r25, r19
    14da:	08 95       	ret

000014dc <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
	if(PV_ICU_CallBack != NULL )
    14fe:	e0 91 19 02 	lds	r30, 0x0219
    1502:	f0 91 1a 02 	lds	r31, 0x021A
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	09 f0       	breq	.+2      	; 0x150c <__vector_6+0x30>
		PV_ICU_CallBack();
    150a:	09 95       	icall
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <M_GIE_Void_Enable>:
#include "GIE_Interface.h"

void M_GIE_Void_Enable(void)
{
	//SetBit(SREG_REG,7);
	asm("SEI");		//accessing registers not on the address bus by assembly
    152e:	78 94       	sei
}
    1530:	08 95       	ret

00001532 <M_GIE_Void_Disable>:
void M_GIE_Void_Disable(void)
{
	//ClrBit(SREG_REG,7);
	asm("CLI");		//accessing registers not on the address bus by assembly
    1532:	f8 94       	cli
}
    1534:	08 95       	ret

00001536 <M_ExtInt_Void_ExtInt0Init>:
void (*ExtInt_CallBack)(void) = NULL;				//global pointer to function for ISR
void M_ExtInt_Void_ExtInt0Init()
{
#if SENSE_CONTROL == FALLING_EDGE
	//to select falling edge
	ClrBit(MCUCR_REG,0);
    1536:	e5 e5       	ldi	r30, 0x55	; 85
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8e 7f       	andi	r24, 0xFE	; 254
    153e:	80 83       	st	Z, r24
	SetBit(MCUCR_REG,1);
    1540:	80 81       	ld	r24, Z
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 83       	st	Z, r24
	ClrBit(MCUCR_REG,0);
	ClrBit(MCUCR_REG,1);
#endif

	//to enable local interrupt for int0
	SetBit(GICR_REG,6);
    1546:	eb e5       	ldi	r30, 0x5B	; 91
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 64       	ori	r24, 0x40	; 64
    154e:	80 83       	st	Z, r24
	//to enable global interrupt
	SetBit(SREG_REG,7);
    1550:	ef e5       	ldi	r30, 0x5F	; 95
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	80 83       	st	Z, r24
}
    155a:	08 95       	ret

0000155c <M_ExtInt_Void_ExtInt0SetCallBack>:

void M_ExtInt_Void_ExtInt0SetCallBack(void (*Local_ptr)(void))      //this is a callback function to avoid accessing the ISR by user
{
	ExtInt_CallBack = Local_ptr;
    155c:	90 93 20 02 	sts	0x0220, r25
    1560:	80 93 1f 02 	sts	0x021F, r24
}
    1564:	08 95       	ret

00001566 <__vector_1>:

ISR(INT0_vect)
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
	ExtInt_CallBack();
    1588:	e0 91 1f 02 	lds	r30, 0x021F
    158c:	f0 91 20 02 	lds	r31, 0x0220
    1590:	09 95       	icall
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <M_Dio_Void_PinMode>:
 */

#include"Dio.h"

void M_Dio_Void_PinMode(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    15b4:	28 2f       	mov	r18, r24
    15b6:	36 2f       	mov	r19, r22
	u8 Local_u8_Pin = Local_u8_Num % 10;
    15b8:	6a e0       	ldi	r22, 0x0A	; 10
    15ba:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    15be:	49 2f       	mov	r20, r25
	u8 Local_u8_Port = Local_u8_Num / 10;
    15c0:	82 2f       	mov	r24, r18
    15c2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
	switch(Local_u8_Mode)
    15c6:	33 23       	and	r19, r19
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <M_Dio_Void_PinMode+0x1e>
    15ca:	31 30       	cpi	r19, 0x01	; 1
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <M_Dio_Void_PinMode+0x1c>
    15ce:	86 c0       	rjmp	.+268    	; 0x16dc <M_Dio_Void_PinMode+0x128>
    15d0:	46 c0       	rjmp	.+140    	; 0x165e <M_Dio_Void_PinMode+0xaa>
	{
	case INPUT:
		switch(Local_u8_Port)
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	d1 f0       	breq	.+52     	; 0x160a <M_Dio_Void_PinMode+0x56>
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	20 f4       	brcc	.+8      	; 0x15e2 <M_Dio_Void_PinMode+0x2e>
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <M_Dio_Void_PinMode+0x2c>
    15de:	7e c0       	rjmp	.+252    	; 0x16dc <M_Dio_Void_PinMode+0x128>
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <M_Dio_Void_PinMode+0x3a>
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	01 f1       	breq	.+64     	; 0x1626 <M_Dio_Void_PinMode+0x72>
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	09 f0       	breq	.+2      	; 0x15ec <M_Dio_Void_PinMode+0x38>
    15ea:	78 c0       	rjmp	.+240    	; 0x16dc <M_Dio_Void_PinMode+0x128>
    15ec:	2a c0       	rjmp	.+84     	; 0x1642 <M_Dio_Void_PinMode+0x8e>
		{
			case 1:ClrBit(DDRA_REG,Local_u8_Pin); break;
    15ee:	ea e3       	ldi	r30, 0x3A	; 58
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	20 81       	ld	r18, Z
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <M_Dio_Void_PinMode+0x4a>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	4a 95       	dec	r20
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <M_Dio_Void_PinMode+0x46>
    1602:	80 95       	com	r24
    1604:	82 23       	and	r24, r18
    1606:	80 83       	st	Z, r24
    1608:	08 95       	ret
			case 2:ClrBit(DDRB_REG,Local_u8_Pin); break;
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	20 81       	ld	r18, Z
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 c0       	rjmp	.+4      	; 0x161a <M_Dio_Void_PinMode+0x66>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	4a 95       	dec	r20
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <M_Dio_Void_PinMode+0x62>
    161e:	80 95       	com	r24
    1620:	82 23       	and	r24, r18
    1622:	80 83       	st	Z, r24
    1624:	08 95       	ret
			case 3:ClrBit(DDRC_REG,Local_u8_Pin); break;
    1626:	e4 e3       	ldi	r30, 0x34	; 52
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	20 81       	ld	r18, Z
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <M_Dio_Void_PinMode+0x82>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	4a 95       	dec	r20
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <M_Dio_Void_PinMode+0x7e>
    163a:	80 95       	com	r24
    163c:	82 23       	and	r24, r18
    163e:	80 83       	st	Z, r24
    1640:	08 95       	ret
			case 4:ClrBit(DDRD_REG,Local_u8_Pin); break;
    1642:	e0 e3       	ldi	r30, 0x30	; 48
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	20 81       	ld	r18, Z
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <M_Dio_Void_PinMode+0x9e>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	4a 95       	dec	r20
    1654:	e2 f7       	brpl	.-8      	; 0x164e <M_Dio_Void_PinMode+0x9a>
    1656:	80 95       	com	r24
    1658:	82 23       	and	r24, r18
    165a:	80 83       	st	Z, r24
    165c:	08 95       	ret
			default:						  break;
		}
		break;
	case OUTPUT:
		switch(Local_u8_Port)
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	b9 f0       	breq	.+46     	; 0x1690 <M_Dio_Void_PinMode+0xdc>
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	18 f4       	brcc	.+6      	; 0x166c <M_Dio_Void_PinMode+0xb8>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	c9 f5       	brne	.+114    	; 0x16dc <M_Dio_Void_PinMode+0x128>
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <M_Dio_Void_PinMode+0xc2>
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	e9 f0       	breq	.+58     	; 0x16aa <M_Dio_Void_PinMode+0xf6>
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	a1 f5       	brne	.+104    	; 0x16dc <M_Dio_Void_PinMode+0x128>
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <M_Dio_Void_PinMode+0x110>
		{
			case 1:SetBit(DDRA_REG,Local_u8_Pin); break;
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	20 81       	ld	r18, Z
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <M_Dio_Void_PinMode+0xd2>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	4a 95       	dec	r20
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <M_Dio_Void_PinMode+0xce>
    168a:	28 2b       	or	r18, r24
    168c:	20 83       	st	Z, r18
    168e:	08 95       	ret
			case 2:SetBit(DDRB_REG,Local_u8_Pin); break;
    1690:	e7 e3       	ldi	r30, 0x37	; 55
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	20 81       	ld	r18, Z
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <M_Dio_Void_PinMode+0xec>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	4a 95       	dec	r20
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <M_Dio_Void_PinMode+0xe8>
    16a4:	28 2b       	or	r18, r24
    16a6:	20 83       	st	Z, r18
    16a8:	08 95       	ret
			case 3:SetBit(DDRC_REG,Local_u8_Pin); break;
    16aa:	e4 e3       	ldi	r30, 0x34	; 52
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	20 81       	ld	r18, Z
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <M_Dio_Void_PinMode+0x106>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	4a 95       	dec	r20
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <M_Dio_Void_PinMode+0x102>
    16be:	28 2b       	or	r18, r24
    16c0:	20 83       	st	Z, r18
    16c2:	08 95       	ret
			case 4:SetBit(DDRD_REG,Local_u8_Pin); break;
    16c4:	e0 e3       	ldi	r30, 0x30	; 48
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	20 81       	ld	r18, Z
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <M_Dio_Void_PinMode+0x120>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	4a 95       	dec	r20
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <M_Dio_Void_PinMode+0x11c>
    16d8:	28 2b       	or	r18, r24
    16da:	20 83       	st	Z, r18
    16dc:	08 95       	ret

000016de <M_Dio_Void_PinWrite>:
		break;
	}
}

void M_Dio_Void_PinWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    16de:	28 2f       	mov	r18, r24
    16e0:	36 2f       	mov	r19, r22
	u8 Local_u8_Pin = Local_u8_Num % 10;
    16e2:	6a e0       	ldi	r22, 0x0A	; 10
    16e4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    16e8:	49 2f       	mov	r20, r25
	u8 Local_u8_Port = Local_u8_Num / 10;
    16ea:	82 2f       	mov	r24, r18
    16ec:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
	switch(Local_u8_Mode)
    16f0:	33 23       	and	r19, r19
    16f2:	21 f0       	breq	.+8      	; 0x16fc <M_Dio_Void_PinWrite+0x1e>
    16f4:	31 30       	cpi	r19, 0x01	; 1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <M_Dio_Void_PinWrite+0x1c>
    16f8:	86 c0       	rjmp	.+268    	; 0x1806 <M_Dio_Void_PinWrite+0x128>
    16fa:	46 c0       	rjmp	.+140    	; 0x1788 <M_Dio_Void_PinWrite+0xaa>
	{
	case LOW:
		switch(Local_u8_Port)
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	d1 f0       	breq	.+52     	; 0x1734 <M_Dio_Void_PinWrite+0x56>
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	20 f4       	brcc	.+8      	; 0x170c <M_Dio_Void_PinWrite+0x2e>
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	09 f0       	breq	.+2      	; 0x170a <M_Dio_Void_PinWrite+0x2c>
    1708:	7e c0       	rjmp	.+252    	; 0x1806 <M_Dio_Void_PinWrite+0x128>
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <M_Dio_Void_PinWrite+0x3a>
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	01 f1       	breq	.+64     	; 0x1750 <M_Dio_Void_PinWrite+0x72>
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	09 f0       	breq	.+2      	; 0x1716 <M_Dio_Void_PinWrite+0x38>
    1714:	78 c0       	rjmp	.+240    	; 0x1806 <M_Dio_Void_PinWrite+0x128>
    1716:	2a c0       	rjmp	.+84     	; 0x176c <M_Dio_Void_PinWrite+0x8e>
		{
			case 1:ClrBit(PORTA_REG,Local_u8_Pin); break;
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	20 81       	ld	r18, Z
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <M_Dio_Void_PinWrite+0x4a>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	4a 95       	dec	r20
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <M_Dio_Void_PinWrite+0x46>
    172c:	80 95       	com	r24
    172e:	82 23       	and	r24, r18
    1730:	80 83       	st	Z, r24
    1732:	08 95       	ret
			case 2:ClrBit(PORTB_REG,Local_u8_Pin); break;
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	20 81       	ld	r18, Z
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <M_Dio_Void_PinWrite+0x66>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	4a 95       	dec	r20
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <M_Dio_Void_PinWrite+0x62>
    1748:	80 95       	com	r24
    174a:	82 23       	and	r24, r18
    174c:	80 83       	st	Z, r24
    174e:	08 95       	ret
			case 3:ClrBit(PORTC_REG,Local_u8_Pin); break;
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	20 81       	ld	r18, Z
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <M_Dio_Void_PinWrite+0x82>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	4a 95       	dec	r20
    1762:	e2 f7       	brpl	.-8      	; 0x175c <M_Dio_Void_PinWrite+0x7e>
    1764:	80 95       	com	r24
    1766:	82 23       	and	r24, r18
    1768:	80 83       	st	Z, r24
    176a:	08 95       	ret
			case 4:ClrBit(PORTD_REG,Local_u8_Pin); break;
    176c:	e1 e3       	ldi	r30, 0x31	; 49
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	20 81       	ld	r18, Z
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <M_Dio_Void_PinWrite+0x9e>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	4a 95       	dec	r20
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <M_Dio_Void_PinWrite+0x9a>
    1780:	80 95       	com	r24
    1782:	82 23       	and	r24, r18
    1784:	80 83       	st	Z, r24
    1786:	08 95       	ret
			default:						   break;
		}
		break;
	case HIGH:
		switch(Local_u8_Port)
    1788:	82 30       	cpi	r24, 0x02	; 2
    178a:	b9 f0       	breq	.+46     	; 0x17ba <M_Dio_Void_PinWrite+0xdc>
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	18 f4       	brcc	.+6      	; 0x1796 <M_Dio_Void_PinWrite+0xb8>
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	c9 f5       	brne	.+114    	; 0x1806 <M_Dio_Void_PinWrite+0x128>
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <M_Dio_Void_PinWrite+0xc2>
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	e9 f0       	breq	.+58     	; 0x17d4 <M_Dio_Void_PinWrite+0xf6>
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	a1 f5       	brne	.+104    	; 0x1806 <M_Dio_Void_PinWrite+0x128>
    179e:	27 c0       	rjmp	.+78     	; 0x17ee <M_Dio_Void_PinWrite+0x110>
		{
			case 1:SetBit(PORTA_REG,Local_u8_Pin); break;
    17a0:	eb e3       	ldi	r30, 0x3B	; 59
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	20 81       	ld	r18, Z
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <M_Dio_Void_PinWrite+0xd2>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	4a 95       	dec	r20
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <M_Dio_Void_PinWrite+0xce>
    17b4:	28 2b       	or	r18, r24
    17b6:	20 83       	st	Z, r18
    17b8:	08 95       	ret
			case 2:SetBit(PORTB_REG,Local_u8_Pin); break;
    17ba:	e8 e3       	ldi	r30, 0x38	; 56
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	20 81       	ld	r18, Z
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <M_Dio_Void_PinWrite+0xec>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	4a 95       	dec	r20
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <M_Dio_Void_PinWrite+0xe8>
    17ce:	28 2b       	or	r18, r24
    17d0:	20 83       	st	Z, r18
    17d2:	08 95       	ret
			case 3:SetBit(PORTC_REG,Local_u8_Pin); break;
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	20 81       	ld	r18, Z
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <M_Dio_Void_PinWrite+0x106>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	4a 95       	dec	r20
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <M_Dio_Void_PinWrite+0x102>
    17e8:	28 2b       	or	r18, r24
    17ea:	20 83       	st	Z, r18
    17ec:	08 95       	ret
			case 4:SetBit(PORTD_REG,Local_u8_Pin); break;
    17ee:	e1 e3       	ldi	r30, 0x31	; 49
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	20 81       	ld	r18, Z
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <M_Dio_Void_PinWrite+0x120>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	4a 95       	dec	r20
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <M_Dio_Void_PinWrite+0x11c>
    1802:	28 2b       	or	r18, r24
    1804:	20 83       	st	Z, r18
    1806:	08 95       	ret

00001808 <M_Dio_Void_PinTog>:
	}
}


void M_Dio_Void_PinTog(u8 Local_u8_Num)
{
    1808:	28 2f       	mov	r18, r24
	u8 Local_u8_Pin = Local_u8_Num % 10;
    180a:	6a e0       	ldi	r22, 0x0A	; 10
    180c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    1810:	39 2f       	mov	r19, r25
	u8 Local_u8_Port = Local_u8_Num / 10;
		switch(Local_u8_Port)
    1812:	82 2f       	mov	r24, r18
    1814:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	b9 f0       	breq	.+46     	; 0x184a <M_Dio_Void_PinTog+0x42>
    181c:	83 30       	cpi	r24, 0x03	; 3
    181e:	18 f4       	brcc	.+6      	; 0x1826 <M_Dio_Void_PinTog+0x1e>
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	c9 f5       	brne	.+114    	; 0x1896 <M_Dio_Void_PinTog+0x8e>
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <M_Dio_Void_PinTog+0x28>
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	e9 f0       	breq	.+58     	; 0x1864 <M_Dio_Void_PinTog+0x5c>
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	a1 f5       	brne	.+104    	; 0x1896 <M_Dio_Void_PinTog+0x8e>
    182e:	27 c0       	rjmp	.+78     	; 0x187e <M_Dio_Void_PinTog+0x76>
		{
			case 1:TogBit(PORTA_REG,Local_u8_Pin); break;
    1830:	eb e3       	ldi	r30, 0x3B	; 59
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	20 81       	ld	r18, Z
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <M_Dio_Void_PinTog+0x38>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	3a 95       	dec	r19
    1842:	e2 f7       	brpl	.-8      	; 0x183c <M_Dio_Void_PinTog+0x34>
    1844:	28 27       	eor	r18, r24
    1846:	20 83       	st	Z, r18
    1848:	08 95       	ret
			case 2:TogBit(PORTB_REG,Local_u8_Pin); break;
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	20 81       	ld	r18, Z
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <M_Dio_Void_PinTog+0x52>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	3a 95       	dec	r19
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <M_Dio_Void_PinTog+0x4e>
    185e:	28 27       	eor	r18, r24
    1860:	20 83       	st	Z, r18
    1862:	08 95       	ret
			case 3:TogBit(PORTC_REG,Local_u8_Pin); break;
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	20 81       	ld	r18, Z
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <M_Dio_Void_PinTog+0x6c>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	3a 95       	dec	r19
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <M_Dio_Void_PinTog+0x68>
    1878:	28 27       	eor	r18, r24
    187a:	20 83       	st	Z, r18
    187c:	08 95       	ret
			case 4:TogBit(PORTD_REG,Local_u8_Pin); break;
    187e:	e1 e3       	ldi	r30, 0x31	; 49
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	20 81       	ld	r18, Z
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <M_Dio_Void_PinTog+0x86>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	3a 95       	dec	r19
    1890:	e2 f7       	brpl	.-8      	; 0x188a <M_Dio_Void_PinTog+0x82>
    1892:	28 27       	eor	r18, r24
    1894:	20 83       	st	Z, r18
    1896:	08 95       	ret

00001898 <M_Dio_U8_PinRead>:
		}
}


u8 M_Dio_U8_PinRead(u8 Local_u8_Num)
{
    1898:	28 2f       	mov	r18, r24
	u8 Local_u8_Pin = Local_u8_Num % 10;
    189a:	6a e0       	ldi	r22, 0x0A	; 10
    189c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    18a0:	39 2f       	mov	r19, r25
	u8 Local_u8_Port = Local_u8_Num / 10;
	u8 Local_u8_Reading = 0;
	switch(Local_u8_Port)
    18a2:	82 2f       	mov	r24, r18
    18a4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    18a8:	82 30       	cpi	r24, 0x02	; 2
    18aa:	a1 f0       	breq	.+40     	; 0x18d4 <M_Dio_U8_PinRead+0x3c>
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	18 f4       	brcc	.+6      	; 0x18b6 <M_Dio_U8_PinRead+0x1e>
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	29 f4       	brne	.+10     	; 0x18be <M_Dio_U8_PinRead+0x26>
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <M_Dio_U8_PinRead+0x2a>
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	b1 f0       	breq	.+44     	; 0x18e6 <M_Dio_U8_PinRead+0x4e>
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	e9 f0       	breq	.+58     	; 0x18f8 <M_Dio_U8_PinRead+0x60>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	08 95       	ret
	{
		case 1:Local_u8_Reading = GetBit(PINA_REG,Local_u8_Pin); break;
    18c2:	89 b3       	in	r24, 0x19	; 25
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <M_Dio_U8_PinRead+0x34>
    18c8:	95 95       	asr	r25
    18ca:	87 95       	ror	r24
    18cc:	3a 95       	dec	r19
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <M_Dio_U8_PinRead+0x30>
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	08 95       	ret
		case 2:Local_u8_Reading = GetBit(PINB_REG,Local_u8_Pin); break;
    18d4:	86 b3       	in	r24, 0x16	; 22
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <M_Dio_U8_PinRead+0x46>
    18da:	95 95       	asr	r25
    18dc:	87 95       	ror	r24
    18de:	3a 95       	dec	r19
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <M_Dio_U8_PinRead+0x42>
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	08 95       	ret
		case 3:Local_u8_Reading = GetBit(PINC_REG,Local_u8_Pin); break;
    18e6:	83 b3       	in	r24, 0x13	; 19
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <M_Dio_U8_PinRead+0x58>
    18ec:	95 95       	asr	r25
    18ee:	87 95       	ror	r24
    18f0:	3a 95       	dec	r19
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <M_Dio_U8_PinRead+0x54>
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	08 95       	ret
		case 4:Local_u8_Reading = GetBit(PIND_REG,Local_u8_Pin); break;
    18f8:	80 b3       	in	r24, 0x10	; 16
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <M_Dio_U8_PinRead+0x6a>
    18fe:	95 95       	asr	r25
    1900:	87 95       	ror	r24
    1902:	3a 95       	dec	r19
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <M_Dio_U8_PinRead+0x66>
    1906:	81 70       	andi	r24, 0x01	; 1
		default:						  					 break;
		}
	return Local_u8_Reading;
}
    1908:	08 95       	ret

0000190a <M_ADC_Void_ADCInit>:
u16 x=0;
void M_ADC_Void_ADCInit(void)
{
	//to select Vref
#if V_REF == AVCC
	SetBit(ADMUX_REG,6);
    190a:	e7 e2       	ldi	r30, 0x27	; 39
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 64       	ori	r24, 0x40	; 64
    1912:	80 83       	st	Z, r24
	ClrBit(ADMUX_REG,7);
    1914:	80 81       	ld	r24, Z
    1916:	8f 77       	andi	r24, 0x7F	; 127
    1918:	80 83       	st	Z, r24
#elif V_REF == _2V_PIN
	SetBit(ADMUX_REG,6);
	ClrBit(ADMUX_REG,7);
#endif
	//to select right adjust
	ClrBit(ADMUX_REG,5);
    191a:	80 81       	ld	r24, Z
    191c:	8f 7d       	andi	r24, 0xDF	; 223
    191e:	80 83       	st	Z, r24
	//to select ADC channel (ADC0)
	ClrBit(ADMUX_REG,4);
    1920:	80 81       	ld	r24, Z
    1922:	8f 7e       	andi	r24, 0xEF	; 239
    1924:	80 83       	st	Z, r24
	ClrBit(ADMUX_REG,3);
    1926:	80 81       	ld	r24, Z
    1928:	87 7f       	andi	r24, 0xF7	; 247
    192a:	80 83       	st	Z, r24
	ClrBit(ADMUX_REG,2);
    192c:	80 81       	ld	r24, Z
    192e:	8b 7f       	andi	r24, 0xFB	; 251
    1930:	80 83       	st	Z, r24
	ClrBit(ADMUX_REG,1);
    1932:	80 81       	ld	r24, Z
    1934:	8d 7f       	andi	r24, 0xFD	; 253
    1936:	80 83       	st	Z, r24
	ClrBit(ADMUX_REG,0);
    1938:	80 81       	ld	r24, Z
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	80 83       	st	Z, r24
	//to select prescaler (128)
	SetBit(ADCSRA_REG,2);
    193e:	e6 e2       	ldi	r30, 0x26	; 38
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	84 60       	ori	r24, 0x04	; 4
    1946:	80 83       	st	Z, r24
	SetBit(ADCSRA_REG,1);
    1948:	80 81       	ld	r24, Z
    194a:	82 60       	ori	r24, 0x02	; 2
    194c:	80 83       	st	Z, r24
	SetBit(ADCSRA_REG,0);
    194e:	80 81       	ld	r24, Z
    1950:	81 60       	ori	r24, 0x01	; 1
    1952:	80 83       	st	Z, r24
	// To Enable auto trigger mode -> free running
	SetBit(ADCSRA_REG,5);
    1954:	80 81       	ld	r24, Z
    1956:	80 62       	ori	r24, 0x20	; 32
    1958:	80 83       	st	Z, r24
	//to enable ADC circuit
	SetBit(ADCSRA_REG,7);
    195a:	80 81       	ld	r24, Z
    195c:	80 68       	ori	r24, 0x80	; 128
    195e:	80 83       	st	Z, r24
#if  ADC_MODE	==	ADC_INT
	//to enable interrupt
	SetBit(ADCSRA_REG,6);
#endif
}
    1960:	08 95       	ret

00001962 <M_ADC_U16_ADCRead>:

#if ADC_MODE	==	ADC_POL
u16 M_ADC_U16_ADCRead(void)
{
	// to start conversion
	SetBit(ADCSRA_REG,6);
    1962:	e6 e2       	ldi	r30, 0x26	; 38
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 64       	ori	r24, 0x40	; 64
    196a:	80 83       	st	Z, r24
	while (GetBit(ADCSRA_REG,4) == 0);
    196c:	80 81       	ld	r24, Z
    196e:	84 ff       	sbrs	r24, 4
    1970:	fd cf       	rjmp	.-6      	; 0x196c <M_ADC_U16_ADCRead+0xa>
	return ADC_REG;
    1972:	24 b1       	in	r18, 0x04	; 4
    1974:	35 b1       	in	r19, 0x05	; 5
}
    1976:	82 2f       	mov	r24, r18
    1978:	93 2f       	mov	r25, r19
    197a:	08 95       	ret

0000197c <H_TempSensor_U8_TempSensorRead>:
{
	M_ADC_Void_ADCInit();
}
u8 H_TempSensor_U8_TempSensorRead(void)
{
	u16 Local_u16_ADCReading = M_ADC_U16_ADCRead();
    197c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <M_ADC_U16_ADCRead>
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	53 e4       	ldi	r21, 0x43	; 67
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 ec       	ldi	r19, 0xC0	; 192
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
	return ((f32)Local_u16_ADCReading*500) / 1023 ;
}
    19ac:	08 95       	ret

000019ae <H_TempSensor_Void_TempSensorInit>:
#include"TempSensor.h"


void H_TempSensor_Void_TempSensorInit(void)
{
	M_ADC_Void_ADCInit();
    19ae:	0e 94 85 0c 	call	0x190a	; 0x190a <M_ADC_Void_ADCInit>
}
    19b2:	08 95       	ret

000019b4 <H_SSD_Void_SSDDisplay>:
	M_Dio_Void_PinMode(SSD_LED_DOT,OUTPUT);
	M_Dio_Void_PinMode(SSD_EN_1,OUTPUT);
	M_Dio_Void_PinMode(SSD_EN_2,OUTPUT);
}
void H_SSD_Void_SSDDisplay(u8 Local_u8_Num)
{
    19b4:	1f 93       	push	r17
    19b6:	18 2f       	mov	r17, r24
	u8 Local_u8_Units = Local_u8_Num % 10;
	u8 Local_u8_Tens = Local_u8_Num / 10;

	switch(Local_u8_Units)
    19b8:	6a e0       	ldi	r22, 0x0A	; 10
    19ba:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    19be:	94 30       	cpi	r25, 0x04	; 4
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <H_SSD_Void_SSDDisplay+0x10>
    19c2:	94 c0       	rjmp	.+296    	; 0x1aec <H_SSD_Void_SSDDisplay+0x138>
    19c4:	95 30       	cpi	r25, 0x05	; 5
    19c6:	58 f4       	brcc	.+22     	; 0x19de <H_SSD_Void_SSDDisplay+0x2a>
    19c8:	91 30       	cpi	r25, 0x01	; 1
    19ca:	c9 f1       	breq	.+114    	; 0x1a3e <H_SSD_Void_SSDDisplay+0x8a>
    19cc:	91 30       	cpi	r25, 0x01	; 1
    19ce:	d0 f0       	brcs	.+52     	; 0x1a04 <H_SSD_Void_SSDDisplay+0x50>
    19d0:	92 30       	cpi	r25, 0x02	; 2
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <H_SSD_Void_SSDDisplay+0x22>
    19d4:	51 c0       	rjmp	.+162    	; 0x1a78 <H_SSD_Void_SSDDisplay+0xc4>
    19d6:	93 30       	cpi	r25, 0x03	; 3
    19d8:	09 f0       	breq	.+2      	; 0x19dc <H_SSD_Void_SSDDisplay+0x28>
    19da:	35 c1       	rjmp	.+618    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
    19dc:	6a c0       	rjmp	.+212    	; 0x1ab2 <H_SSD_Void_SSDDisplay+0xfe>
    19de:	97 30       	cpi	r25, 0x07	; 7
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <H_SSD_Void_SSDDisplay+0x30>
    19e2:	db c0       	rjmp	.+438    	; 0x1b9a <H_SSD_Void_SSDDisplay+0x1e6>
    19e4:	98 30       	cpi	r25, 0x08	; 8
    19e6:	38 f4       	brcc	.+14     	; 0x19f6 <H_SSD_Void_SSDDisplay+0x42>
    19e8:	95 30       	cpi	r25, 0x05	; 5
    19ea:	09 f4       	brne	.+2      	; 0x19ee <H_SSD_Void_SSDDisplay+0x3a>
    19ec:	9c c0       	rjmp	.+312    	; 0x1b26 <H_SSD_Void_SSDDisplay+0x172>
    19ee:	96 30       	cpi	r25, 0x06	; 6
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <H_SSD_Void_SSDDisplay+0x40>
    19f2:	29 c1       	rjmp	.+594    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
    19f4:	b5 c0       	rjmp	.+362    	; 0x1b60 <H_SSD_Void_SSDDisplay+0x1ac>
    19f6:	98 30       	cpi	r25, 0x08	; 8
    19f8:	09 f4       	brne	.+2      	; 0x19fc <H_SSD_Void_SSDDisplay+0x48>
    19fa:	ec c0       	rjmp	.+472    	; 0x1bd4 <H_SSD_Void_SSDDisplay+0x220>
    19fc:	99 30       	cpi	r25, 0x09	; 9
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <H_SSD_Void_SSDDisplay+0x4e>
    1a00:	22 c1       	rjmp	.+580    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
    1a02:	05 c1       	rjmp	.+522    	; 0x1c0e <H_SSD_Void_SSDDisplay+0x25a>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1a04:	8b e0       	ldi	r24, 0x0B	; 11
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1a0c:	8c e0       	ldi	r24, 0x0C	; 12
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1a14:	8d e0       	ldi	r24, 0x0D	; 13
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1a1c:	8e e0       	ldi	r24, 0x0E	; 14
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1a24:	8f e0       	ldi	r24, 0x0F	; 15
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1a2c:	80 e1       	ldi	r24, 0x10	; 16
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1a34:	81 e1       	ldi	r24, 0x11	; 17
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1a3c:	04 c1       	rjmp	.+520    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1a3e:	8b e0       	ldi	r24, 0x0B	; 11
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1a46:	8c e0       	ldi	r24, 0x0C	; 12
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1a4e:	8d e0       	ldi	r24, 0x0D	; 13
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1a56:	8e e0       	ldi	r24, 0x0E	; 14
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1a5e:	80 e1       	ldi	r24, 0x10	; 16
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1a66:	8f e0       	ldi	r24, 0x0F	; 15
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1a6e:	81 e1       	ldi	r24, 0x11	; 17
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1a76:	e7 c0       	rjmp	.+462    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1a78:	8b e0       	ldi	r24, 0x0B	; 11
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1a80:	8c e0       	ldi	r24, 0x0C	; 12
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1a90:	8e e0       	ldi	r24, 0x0E	; 14
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1a98:	8f e0       	ldi	r24, 0x0F	; 15
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1aa0:	80 e1       	ldi	r24, 0x10	; 16
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1aa8:	81 e1       	ldi	r24, 0x11	; 17
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1ab0:	ca c0       	rjmp	.+404    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1ab2:	8b e0       	ldi	r24, 0x0B	; 11
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1aba:	8c e0       	ldi	r24, 0x0C	; 12
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1ac2:	8d e0       	ldi	r24, 0x0D	; 13
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1aca:	8e e0       	ldi	r24, 0x0E	; 14
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1ad2:	8f e0       	ldi	r24, 0x0F	; 15
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1ae2:	81 e1       	ldi	r24, 0x11	; 17
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1aea:	ad c0       	rjmp	.+346    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1aec:	8b e0       	ldi	r24, 0x0B	; 11
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1af4:	8c e0       	ldi	r24, 0x0C	; 12
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1afc:	8d e0       	ldi	r24, 0x0D	; 13
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1b04:	8e e0       	ldi	r24, 0x0E	; 14
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1b0c:	8f e0       	ldi	r24, 0x0F	; 15
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1b14:	80 e1       	ldi	r24, 0x10	; 16
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1b1c:	81 e1       	ldi	r24, 0x11	; 17
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1b24:	90 c0       	rjmp	.+288    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1b26:	8b e0       	ldi	r24, 0x0B	; 11
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1b2e:	8c e0       	ldi	r24, 0x0C	; 12
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1b36:	8d e0       	ldi	r24, 0x0D	; 13
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1b3e:	8e e0       	ldi	r24, 0x0E	; 14
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1b46:	8f e0       	ldi	r24, 0x0F	; 15
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1b4e:	80 e1       	ldi	r24, 0x10	; 16
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1b56:	81 e1       	ldi	r24, 0x11	; 17
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1b5e:	73 c0       	rjmp	.+230    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1b60:	8b e0       	ldi	r24, 0x0B	; 11
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1b68:	8c e0       	ldi	r24, 0x0C	; 12
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1b70:	8d e0       	ldi	r24, 0x0D	; 13
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1b78:	8e e0       	ldi	r24, 0x0E	; 14
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1b80:	8f e0       	ldi	r24, 0x0F	; 15
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1b88:	80 e1       	ldi	r24, 0x10	; 16
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1b90:	81 e1       	ldi	r24, 0x11	; 17
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1b98:	56 c0       	rjmp	.+172    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1b9a:	8b e0       	ldi	r24, 0x0B	; 11
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ba2:	8c e0       	ldi	r24, 0x0C	; 12
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1baa:	8d e0       	ldi	r24, 0x0D	; 13
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1bb2:	8e e0       	ldi	r24, 0x0E	; 14
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1bba:	8f e0       	ldi	r24, 0x0F	; 15
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1bc2:	80 e1       	ldi	r24, 0x10	; 16
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1bca:	81 e1       	ldi	r24, 0x11	; 17
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1bd2:	39 c0       	rjmp	.+114    	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1bd4:	8b e0       	ldi	r24, 0x0B	; 11
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1bdc:	8c e0       	ldi	r24, 0x0C	; 12
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1be4:	8d e0       	ldi	r24, 0x0D	; 13
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1bec:	8e e0       	ldi	r24, 0x0E	; 14
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1bf4:	8f e0       	ldi	r24, 0x0F	; 15
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1bfc:	80 e1       	ldi	r24, 0x10	; 16
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1c04:	81 e1       	ldi	r24, 0x11	; 17
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1c0c:	1c c0       	rjmp	.+56     	; 0x1c46 <H_SSD_Void_SSDDisplay+0x292>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1c0e:	8b e0       	ldi	r24, 0x0B	; 11
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1c16:	8c e0       	ldi	r24, 0x0C	; 12
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1c1e:	8d e0       	ldi	r24, 0x0D	; 13
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1c26:	8e e0       	ldi	r24, 0x0E	; 14
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1c2e:	8f e0       	ldi	r24, 0x0F	; 15
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1c36:	80 e1       	ldi	r24, 0x10	; 16
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1c3e:	81 e1       	ldi	r24, 0x11	; 17
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,HIGH);
    1c46:	84 e2       	ldi	r24, 0x24	; 36
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    1c4e:	85 e2       	ldi	r24, 0x25	; 37
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1c56:	80 ea       	ldi	r24, 0xA0	; 160
    1c58:	9f e0       	ldi	r25, 0x0F	; 15
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <H_SSD_Void_SSDDisplay+0x2a6>
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    1c5e:	84 e2       	ldi	r24, 0x24	; 36
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>

	switch(Local_u8_Tens)
    1c66:	81 2f       	mov	r24, r17
    1c68:	6a e0       	ldi	r22, 0x0A	; 10
    1c6a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__udivmodqi4>
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <H_SSD_Void_SSDDisplay+0x2c0>
    1c72:	94 c0       	rjmp	.+296    	; 0x1d9c <H_SSD_Void_SSDDisplay+0x3e8>
    1c74:	85 30       	cpi	r24, 0x05	; 5
    1c76:	58 f4       	brcc	.+22     	; 0x1c8e <H_SSD_Void_SSDDisplay+0x2da>
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	c9 f1       	breq	.+114    	; 0x1cee <H_SSD_Void_SSDDisplay+0x33a>
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	d0 f0       	brcs	.+52     	; 0x1cb4 <H_SSD_Void_SSDDisplay+0x300>
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <H_SSD_Void_SSDDisplay+0x2d2>
    1c84:	51 c0       	rjmp	.+162    	; 0x1d28 <H_SSD_Void_SSDDisplay+0x374>
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <H_SSD_Void_SSDDisplay+0x2d8>
    1c8a:	35 c1       	rjmp	.+618    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
    1c8c:	6a c0       	rjmp	.+212    	; 0x1d62 <H_SSD_Void_SSDDisplay+0x3ae>
    1c8e:	87 30       	cpi	r24, 0x07	; 7
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <H_SSD_Void_SSDDisplay+0x2e0>
    1c92:	db c0       	rjmp	.+438    	; 0x1e4a <H_SSD_Void_SSDDisplay+0x496>
    1c94:	88 30       	cpi	r24, 0x08	; 8
    1c96:	38 f4       	brcc	.+14     	; 0x1ca6 <H_SSD_Void_SSDDisplay+0x2f2>
    1c98:	85 30       	cpi	r24, 0x05	; 5
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <H_SSD_Void_SSDDisplay+0x2ea>
    1c9c:	9c c0       	rjmp	.+312    	; 0x1dd6 <H_SSD_Void_SSDDisplay+0x422>
    1c9e:	86 30       	cpi	r24, 0x06	; 6
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <H_SSD_Void_SSDDisplay+0x2f0>
    1ca2:	29 c1       	rjmp	.+594    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
    1ca4:	b5 c0       	rjmp	.+362    	; 0x1e10 <H_SSD_Void_SSDDisplay+0x45c>
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <H_SSD_Void_SSDDisplay+0x2f8>
    1caa:	ec c0       	rjmp	.+472    	; 0x1e84 <H_SSD_Void_SSDDisplay+0x4d0>
    1cac:	89 30       	cpi	r24, 0x09	; 9
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <H_SSD_Void_SSDDisplay+0x2fe>
    1cb0:	22 c1       	rjmp	.+580    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
    1cb2:	05 c1       	rjmp	.+522    	; 0x1ebe <H_SSD_Void_SSDDisplay+0x50a>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1cb4:	8b e0       	ldi	r24, 0x0B	; 11
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1cbc:	8c e0       	ldi	r24, 0x0C	; 12
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1cc4:	8d e0       	ldi	r24, 0x0D	; 13
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ccc:	8e e0       	ldi	r24, 0x0E	; 14
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1cd4:	8f e0       	ldi	r24, 0x0F	; 15
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1ce4:	81 e1       	ldi	r24, 0x11	; 17
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1cec:	04 c1       	rjmp	.+520    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1cee:	8b e0       	ldi	r24, 0x0B	; 11
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1cf6:	8c e0       	ldi	r24, 0x0C	; 12
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1cfe:	8d e0       	ldi	r24, 0x0D	; 13
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1d06:	8e e0       	ldi	r24, 0x0E	; 14
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1d0e:	80 e1       	ldi	r24, 0x10	; 16
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1d16:	8f e0       	ldi	r24, 0x0F	; 15
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1d1e:	81 e1       	ldi	r24, 0x11	; 17
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1d26:	e7 c0       	rjmp	.+462    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1d28:	8b e0       	ldi	r24, 0x0B	; 11
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1d30:	8c e0       	ldi	r24, 0x0C	; 12
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    1d38:	8d e0       	ldi	r24, 0x0D	; 13
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1d40:	8e e0       	ldi	r24, 0x0E	; 14
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1d48:	8f e0       	ldi	r24, 0x0F	; 15
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1d50:	80 e1       	ldi	r24, 0x10	; 16
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1d58:	81 e1       	ldi	r24, 0x11	; 17
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1d60:	ca c0       	rjmp	.+404    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1d62:	8b e0       	ldi	r24, 0x0B	; 11
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1d6a:	8c e0       	ldi	r24, 0x0C	; 12
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1d72:	8d e0       	ldi	r24, 0x0D	; 13
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1d7a:	8e e0       	ldi	r24, 0x0E	; 14
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1d82:	8f e0       	ldi	r24, 0x0F	; 15
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1d92:	81 e1       	ldi	r24, 0x11	; 17
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1d9a:	ad c0       	rjmp	.+346    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1d9c:	8b e0       	ldi	r24, 0x0B	; 11
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1da4:	8c e0       	ldi	r24, 0x0C	; 12
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1dac:	8d e0       	ldi	r24, 0x0D	; 13
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1db4:	8e e0       	ldi	r24, 0x0E	; 14
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1dbc:	8f e0       	ldi	r24, 0x0F	; 15
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1dc4:	80 e1       	ldi	r24, 0x10	; 16
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1dcc:	81 e1       	ldi	r24, 0x11	; 17
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1dd4:	90 c0       	rjmp	.+288    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1dd6:	8b e0       	ldi	r24, 0x0B	; 11
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1dde:	8c e0       	ldi	r24, 0x0C	; 12
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1de6:	8d e0       	ldi	r24, 0x0D	; 13
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1dee:	8e e0       	ldi	r24, 0x0E	; 14
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1df6:	8f e0       	ldi	r24, 0x0F	; 15
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1dfe:	80 e1       	ldi	r24, 0x10	; 16
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1e06:	81 e1       	ldi	r24, 0x11	; 17
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1e0e:	73 c0       	rjmp	.+230    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e10:	8b e0       	ldi	r24, 0x0B	; 11
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1e18:	8c e0       	ldi	r24, 0x0C	; 12
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e20:	8d e0       	ldi	r24, 0x0D	; 13
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e28:	8e e0       	ldi	r24, 0x0E	; 14
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1e30:	8f e0       	ldi	r24, 0x0F	; 15
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1e38:	80 e1       	ldi	r24, 0x10	; 16
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1e40:	81 e1       	ldi	r24, 0x11	; 17
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1e48:	56 c0       	rjmp	.+172    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e4a:	8b e0       	ldi	r24, 0x0B	; 11
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e52:	8c e0       	ldi	r24, 0x0C	; 12
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e5a:	8d e0       	ldi	r24, 0x0D	; 13
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1e62:	8e e0       	ldi	r24, 0x0E	; 14
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1e6a:	8f e0       	ldi	r24, 0x0F	; 15
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1e72:	80 e1       	ldi	r24, 0x10	; 16
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1e7a:	81 e1       	ldi	r24, 0x11	; 17
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1e82:	39 c0       	rjmp	.+114    	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e84:	8b e0       	ldi	r24, 0x0B	; 11
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e8c:	8c e0       	ldi	r24, 0x0C	; 12
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e94:	8d e0       	ldi	r24, 0x0D	; 13
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e9c:	8e e0       	ldi	r24, 0x0E	; 14
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1ea4:	8f e0       	ldi	r24, 0x0F	; 15
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1eac:	80 e1       	ldi	r24, 0x10	; 16
    1eae:	61 e0       	ldi	r22, 0x01	; 1
    1eb0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1eb4:	81 e1       	ldi	r24, 0x11	; 17
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1ebc:	1c c0       	rjmp	.+56     	; 0x1ef6 <H_SSD_Void_SSDDisplay+0x542>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1ebe:	8b e0       	ldi	r24, 0x0B	; 11
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ec6:	8c e0       	ldi	r24, 0x0C	; 12
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1ece:	8d e0       	ldi	r24, 0x0D	; 13
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ed6:	8e e0       	ldi	r24, 0x0E	; 14
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1ede:	8f e0       	ldi	r24, 0x0F	; 15
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1ee6:	80 e1       	ldi	r24, 0x10	; 16
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1eee:	81 e1       	ldi	r24, 0x11	; 17
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    1ef6:	84 e2       	ldi	r24, 0x24	; 36
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,HIGH);
    1efe:	85 e2       	ldi	r24, 0x25	; 37
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    1f06:	80 ea       	ldi	r24, 0xA0	; 160
    1f08:	9f e0       	ldi	r25, 0x0F	; 15
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <H_SSD_Void_SSDDisplay+0x556>
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    1f0e:	85 e2       	ldi	r24, 0x25	; 37
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
}
    1f16:	1f 91       	pop	r17
    1f18:	08 95       	ret

00001f1a <H_SSD_Void_SSDCountDown>:
		_delay_ms(5);
	}
}

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	18 2f       	mov	r17, r24
	s8 Local_u8_Count = Local_u8_Num;
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    1f26:	e8 2e       	mov	r14, r24
    1f28:	ff 24       	eor	r15, r15
    1f2a:	99 27       	eor	r25, r25
    1f2c:	87 fd       	sbrc	r24, 7
    1f2e:	90 95       	com	r25
    1f30:	e8 16       	cp	r14, r24
    1f32:	f9 06       	cpc	r15, r25
    1f34:	84 f4       	brge	.+32     	; 0x1f56 <H_SSD_Void_SSDCountDown+0x3c>
    1f36:	c0 e2       	ldi	r28, 0x20	; 32
    1f38:	de e4       	ldi	r29, 0x4E	; 78
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    1f3a:	81 2f       	mov	r24, r17
    1f3c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <H_SSD_Void_SSDDisplay>
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <H_SSD_Void_SSDCountDown+0x28>
}

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
	s8 Local_u8_Count = Local_u8_Num;
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    1f46:	11 50       	subi	r17, 0x01	; 1
    1f48:	81 2f       	mov	r24, r17
    1f4a:	99 27       	eor	r25, r25
    1f4c:	87 fd       	sbrc	r24, 7
    1f4e:	90 95       	com	r25
    1f50:	e8 16       	cp	r14, r24
    1f52:	f9 06       	cpc	r15, r25
    1f54:	94 f3       	brlt	.-28     	; 0x1f3a <H_SSD_Void_SSDCountDown+0x20>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	08 95       	ret

00001f62 <H_SSD_Void_SSDCountUp>:
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
}

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	08 2f       	mov	r16, r24
    1f6c:	10 e0       	ldi	r17, 0x00	; 0
    1f6e:	c0 e2       	ldi	r28, 0x20	; 32
    1f70:	de e4       	ldi	r29, 0x4E	; 78
	u8 Local_u8_Count = 0;
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    1f72:	81 2f       	mov	r24, r17
    1f74:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <H_SSD_Void_SSDDisplay>
    1f78:	ce 01       	movw	r24, r28
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <H_SSD_Void_SSDCountUp+0x18>
}

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
	u8 Local_u8_Count = 0;
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
    1f7e:	1f 5f       	subi	r17, 0xFF	; 255
    1f80:	01 17       	cp	r16, r17
    1f82:	b8 f7       	brcc	.-18     	; 0x1f72 <H_SSD_Void_SSDCountUp+0x10>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <H_SSD_Void_SSDInit>:
 */
#include"SSd.h"

void H_SSD_Void_SSDInit(void)
{
	M_Dio_Void_PinMode(SSD_LED_A,OUTPUT);
    1f8e:	8b e0       	ldi	r24, 0x0B	; 11
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_B,OUTPUT);
    1f96:	8c e0       	ldi	r24, 0x0C	; 12
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_C,OUTPUT);
    1f9e:	8d e0       	ldi	r24, 0x0D	; 13
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_D,OUTPUT);
    1fa6:	8e e0       	ldi	r24, 0x0E	; 14
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_E,OUTPUT);
    1fae:	8f e0       	ldi	r24, 0x0F	; 15
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_F,OUTPUT);
    1fb6:	80 e1       	ldi	r24, 0x10	; 16
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_G,OUTPUT);
    1fbe:	81 e1       	ldi	r24, 0x11	; 17
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_DOT,OUTPUT);
    1fc6:	84 e1       	ldi	r24, 0x14	; 20
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_1,OUTPUT);
    1fce:	84 e2       	ldi	r24, 0x24	; 36
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_2,OUTPUT);
    1fd6:	85 e2       	ldi	r24, 0x25	; 37
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
}
    1fde:	08 95       	ret

00001fe0 <H_Relay_Void_RelayTog>:
		default:									break;
	}
}
void H_Relay_Void_RelayTog(u8 Local_u8_RelayNum)
{
	switch(Local_u8_RelayNum)
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	19 f0       	breq	.+6      	; 0x1fea <H_Relay_Void_RelayTog+0xa>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	41 f4       	brne	.+16     	; 0x1ff8 <H_Relay_Void_RelayTog+0x18>
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <H_Relay_Void_RelayTog+0x12>
	{
		case RELAY1:
			M_Dio_Void_PinTog(Relay1_Pin);		break;
    1fea:	82 e2       	ldi	r24, 0x22	; 34
    1fec:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_Dio_Void_PinTog>
    1ff0:	08 95       	ret
		case RELAY2:
			M_Dio_Void_PinTog(Relay2_Pin );		break;
    1ff2:	81 e2       	ldi	r24, 0x21	; 33
    1ff4:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_Dio_Void_PinTog>
    1ff8:	08 95       	ret

00001ffa <H_Relay_Void_RelayOff>:
		default:									break;
	}
}
void H_Relay_Void_RelayOff(u8 Local_u8_RelayNum)
{
	switch(Local_u8_RelayNum)
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <H_Relay_Void_RelayOff+0xa>
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	51 f4       	brne	.+20     	; 0x2016 <H_Relay_Void_RelayOff+0x1c>
    2002:	05 c0       	rjmp	.+10     	; 0x200e <H_Relay_Void_RelayOff+0x14>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,LOW);		break;
    2004:	82 e2       	ldi	r24, 0x22	; 34
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    200c:	08 95       	ret
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,LOW);		break;
    200e:	81 e2       	ldi	r24, 0x21	; 33
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2016:	08 95       	ret

00002018 <H_Relay_Void_RelayOn>:
		default:									break;
	}
}
void H_Relay_Void_RelayOn(u8 Local_u8_RelayNum)
{
	switch(Local_u8_RelayNum)
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	19 f0       	breq	.+6      	; 0x2022 <H_Relay_Void_RelayOn+0xa>
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	51 f4       	brne	.+20     	; 0x2034 <H_Relay_Void_RelayOn+0x1c>
    2020:	05 c0       	rjmp	.+10     	; 0x202c <H_Relay_Void_RelayOn+0x14>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,HIGH);		break;
    2022:	82 e2       	ldi	r24, 0x22	; 34
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    202a:	08 95       	ret
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,HIGH);		break;
    202c:	81 e2       	ldi	r24, 0x21	; 33
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2034:	08 95       	ret

00002036 <H_Relay_Void_RelayInit>:

#include"Relay.h"

void H_Relay_Void_RelayInit(u8 Local_u8_RelayNum)
{
	switch(Local_u8_RelayNum)
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	19 f0       	breq	.+6      	; 0x2040 <H_Relay_Void_RelayInit+0xa>
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	51 f4       	brne	.+20     	; 0x2052 <H_Relay_Void_RelayInit+0x1c>
    203e:	05 c0       	rjmp	.+10     	; 0x204a <H_Relay_Void_RelayInit+0x14>
	{
		case RELAY1:
			M_Dio_Void_PinMode(Relay1_Pin,OUTPUT);		break;
    2040:	82 e2       	ldi	r24, 0x22	; 34
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2048:	08 95       	ret
		case RELAY2:
			M_Dio_Void_PinMode(Relay2_Pin,OUTPUT);		break;
    204a:	81 e2       	ldi	r24, 0x21	; 33
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2052:	08 95       	ret

00002054 <H_PushButton_Void_PushButtonRead>:
	case PUSHBUTTON4: M_Dio_Void_PinMode(PUSHBUTTON4_PIN,INPUT);	break;
	default:														break;
	}
}
u8 H_PushButton_Void_PushButtonRead(u8 Local_u8_PushButton)
{
    2054:	1f 93       	push	r17
	u8 Local_u8_Reading = RELEASED;
	switch(Local_u8_PushButton)
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	51 f1       	breq	.+84     	; 0x20ae <H_PushButton_Void_PushButtonRead+0x5a>
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	18 f4       	brcc	.+6      	; 0x2064 <H_PushButton_Void_PushButtonRead+0x10>
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	39 f4       	brne	.+14     	; 0x2070 <H_PushButton_Void_PushButtonRead+0x1c>
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <H_PushButton_Void_PushButtonRead+0x20>
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	09 f4       	brne	.+2      	; 0x206a <H_PushButton_Void_PushButtonRead+0x16>
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <H_PushButton_Void_PushButtonRead+0x94>
    206a:	84 30       	cpi	r24, 0x04	; 4
    206c:	09 f4       	brne	.+2      	; 0x2070 <H_PushButton_Void_PushButtonRead+0x1c>
    206e:	57 c0       	rjmp	.+174    	; 0x211e <H_PushButton_Void_PushButtonRead+0xca>
    2070:	11 e0       	ldi	r17, 0x01	; 1
    2072:	6f c0       	rjmp	.+222    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
	{
	case PUSHBUTTON1:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON1_PIN) ;
    2074:	8a e2       	ldi	r24, 0x2A	; 42
    2076:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    207a:	18 2f       	mov	r17, r24
		if(Local_u8_Reading == PRESSED)
    207c:	88 23       	and	r24, r24
    207e:	09 f0       	breq	.+2      	; 0x2082 <H_PushButton_Void_PushButtonRead+0x2e>
    2080:	68 c0       	rjmp	.+208    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
    2082:	28 ee       	ldi	r18, 0xE8	; 232
    2084:	33 e0       	ldi	r19, 0x03	; 3
    2086:	40 e9       	ldi	r20, 0x90	; 144
    2088:	51 e0       	ldi	r21, 0x01	; 1
    208a:	ca 01       	movw	r24, r20
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <H_PushButton_Void_PushButtonRead+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	21 50       	subi	r18, 0x01	; 1
    2092:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	d1 f7       	brne	.-12     	; 0x208a <H_PushButton_Void_PushButtonRead+0x36>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED)
    2096:	8a e2       	ldi	r24, 0x2A	; 42
    2098:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    209c:	88 23       	and	r24, r24
    209e:	09 f0       	breq	.+2      	; 0x20a2 <H_PushButton_Void_PushButtonRead+0x4e>
    20a0:	58 c0       	rjmp	.+176    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED);
    20a2:	8a e2       	ldi	r24, 0x2A	; 42
    20a4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    20a8:	88 23       	and	r24, r24
    20aa:	d9 f3       	breq	.-10     	; 0x20a2 <H_PushButton_Void_PushButtonRead+0x4e>
    20ac:	52 c0       	rjmp	.+164    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
				Local_u8_Reading = PRESSED;
			}
		}
		break;
	case PUSHBUTTON2:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON2_PIN) ;
    20ae:	8b e2       	ldi	r24, 0x2B	; 43
    20b0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    20b4:	18 2f       	mov	r17, r24
		if(Local_u8_Reading == PRESSED)
    20b6:	88 23       	and	r24, r24
    20b8:	09 f0       	breq	.+2      	; 0x20bc <H_PushButton_Void_PushButtonRead+0x68>
    20ba:	4b c0       	rjmp	.+150    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
    20bc:	28 ee       	ldi	r18, 0xE8	; 232
    20be:	33 e0       	ldi	r19, 0x03	; 3
    20c0:	40 e9       	ldi	r20, 0x90	; 144
    20c2:	51 e0       	ldi	r21, 0x01	; 1
    20c4:	ca 01       	movw	r24, r20
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <H_PushButton_Void_PushButtonRead+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	21 50       	subi	r18, 0x01	; 1
    20cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	d1 f7       	brne	.-12     	; 0x20c4 <H_PushButton_Void_PushButtonRead+0x70>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED)
    20d0:	8b e2       	ldi	r24, 0x2B	; 43
    20d2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    20d6:	88 23       	and	r24, r24
    20d8:	09 f0       	breq	.+2      	; 0x20dc <H_PushButton_Void_PushButtonRead+0x88>
    20da:	3b c0       	rjmp	.+118    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED);
    20dc:	8b e2       	ldi	r24, 0x2B	; 43
    20de:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    20e2:	88 23       	and	r24, r24
    20e4:	d9 f3       	breq	.-10     	; 0x20dc <H_PushButton_Void_PushButtonRead+0x88>
    20e6:	35 c0       	rjmp	.+106    	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
				Local_u8_Reading = PRESSED;
			}
		}
		break;
	case PUSHBUTTON3:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON3_PIN) ;
    20e8:	8c e2       	ldi	r24, 0x2C	; 44
    20ea:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    20ee:	18 2f       	mov	r17, r24
		if(Local_u8_Reading == PRESSED)
    20f0:	88 23       	and	r24, r24
    20f2:	79 f5       	brne	.+94     	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
    20f4:	28 ee       	ldi	r18, 0xE8	; 232
    20f6:	33 e0       	ldi	r19, 0x03	; 3
    20f8:	40 e9       	ldi	r20, 0x90	; 144
    20fa:	51 e0       	ldi	r21, 0x01	; 1
    20fc:	ca 01       	movw	r24, r20
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <H_PushButton_Void_PushButtonRead+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	21 50       	subi	r18, 0x01	; 1
    2104:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	d1 f7       	brne	.-12     	; 0x20fc <H_PushButton_Void_PushButtonRead+0xa8>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED)
    2108:	8c e2       	ldi	r24, 0x2C	; 44
    210a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    210e:	88 23       	and	r24, r24
    2110:	01 f5       	brne	.+64     	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED);
    2112:	8c e2       	ldi	r24, 0x2C	; 44
    2114:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    2118:	88 23       	and	r24, r24
    211a:	d9 f3       	breq	.-10     	; 0x2112 <H_PushButton_Void_PushButtonRead+0xbe>
    211c:	1a c0       	rjmp	.+52     	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
				Local_u8_Reading = PRESSED;
			}
		}
		break;
	case PUSHBUTTON4:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON4_PIN) ;
    211e:	8d e2       	ldi	r24, 0x2D	; 45
    2120:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    2124:	18 2f       	mov	r17, r24
		if(Local_u8_Reading == PRESSED)
    2126:	88 23       	and	r24, r24
    2128:	a1 f4       	brne	.+40     	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
    212a:	28 ee       	ldi	r18, 0xE8	; 232
    212c:	33 e0       	ldi	r19, 0x03	; 3
    212e:	40 e9       	ldi	r20, 0x90	; 144
    2130:	51 e0       	ldi	r21, 0x01	; 1
    2132:	ca 01       	movw	r24, r20
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <H_PushButton_Void_PushButtonRead+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	21 50       	subi	r18, 0x01	; 1
    213a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213c:	d1 f7       	brne	.-12     	; 0x2132 <H_PushButton_Void_PushButtonRead+0xde>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED)
    213e:	8d e2       	ldi	r24, 0x2D	; 45
    2140:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    2144:	88 23       	and	r24, r24
    2146:	29 f4       	brne	.+10     	; 0x2152 <H_PushButton_Void_PushButtonRead+0xfe>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED);
    2148:	8d e2       	ldi	r24, 0x2D	; 45
    214a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    214e:	88 23       	and	r24, r24
    2150:	d9 f3       	breq	.-10     	; 0x2148 <H_PushButton_Void_PushButtonRead+0xf4>
		}
		break;
	default:												break;
	}
	return Local_u8_Reading;
}
    2152:	81 2f       	mov	r24, r17
    2154:	1f 91       	pop	r17
    2156:	08 95       	ret

00002158 <H_PushButton_Void_PushButtonInit>:
#include"PushButton.h"
#include"util/delay.h"

void H_PushButton_Void_PushButtonInit(u8 Local_u8_PushButton)
{
	switch(Local_u8_PushButton)
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	79 f0       	breq	.+30     	; 0x217a <H_PushButton_Void_PushButtonInit+0x22>
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	18 f4       	brcc	.+6      	; 0x2166 <H_PushButton_Void_PushButtonInit+0xe>
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	c9 f4       	brne	.+50     	; 0x2196 <H_PushButton_Void_PushButtonInit+0x3e>
    2164:	05 c0       	rjmp	.+10     	; 0x2170 <H_PushButton_Void_PushButtonInit+0x18>
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	69 f0       	breq	.+26     	; 0x2184 <H_PushButton_Void_PushButtonInit+0x2c>
    216a:	84 30       	cpi	r24, 0x04	; 4
    216c:	a1 f4       	brne	.+40     	; 0x2196 <H_PushButton_Void_PushButtonInit+0x3e>
    216e:	0f c0       	rjmp	.+30     	; 0x218e <H_PushButton_Void_PushButtonInit+0x36>
	{
	case PUSHBUTTON1: M_Dio_Void_PinMode(PUSHBUTTON1_PIN,INPUT);	break;
    2170:	8a e2       	ldi	r24, 0x2A	; 42
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2178:	08 95       	ret
	case PUSHBUTTON2: M_Dio_Void_PinMode(PUSHBUTTON2_PIN,INPUT);	break;
    217a:	8b e2       	ldi	r24, 0x2B	; 43
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2182:	08 95       	ret
	case PUSHBUTTON3: M_Dio_Void_PinMode(PUSHBUTTON3_PIN,INPUT);	break;
    2184:	8c e2       	ldi	r24, 0x2C	; 44
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    218c:	08 95       	ret
	case PUSHBUTTON4: M_Dio_Void_PinMode(PUSHBUTTON4_PIN,INPUT);	break;
    218e:	8d e2       	ldi	r24, 0x2D	; 45
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2196:	08 95       	ret

00002198 <H_Led_Void_LedTog>:
}


void H_Led_Void_LedTog(u8 Local_Led_Pin)
{
	switch(Local_Led_Pin)
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	61 f0       	breq	.+24     	; 0x21b4 <H_Led_Void_LedTog+0x1c>
    219c:	83 30       	cpi	r24, 0x03	; 3
    219e:	31 f0       	breq	.+12     	; 0x21ac <H_Led_Void_LedTog+0x14>
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	59 f4       	brne	.+22     	; 0x21ba <H_Led_Void_LedTog+0x22>
	{
	case BLU_LED:M_Dio_Void_PinTog(Blu_Led_Pin);	break;
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_Dio_Void_PinTog>
    21aa:	08 95       	ret
	case RED_LED:M_Dio_Void_PinTog(Red_Led_Pin);	break;
    21ac:	8e e1       	ldi	r24, 0x1E	; 30
    21ae:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_Dio_Void_PinTog>
    21b2:	08 95       	ret
	case GRN_LED:M_Dio_Void_PinTog(Grn_Led_Pin);	break;
    21b4:	8f e1       	ldi	r24, 0x1F	; 31
    21b6:	0e 94 04 0c 	call	0x1808	; 0x1808 <M_Dio_Void_PinTog>
    21ba:	08 95       	ret

000021bc <H_Led_Void_LedOff>:
	default:											break;
	}
}
void H_Led_Void_LedOff(u8 Local_Led_Pin)
{
	switch(Local_Led_Pin)
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	49 f0       	breq	.+18     	; 0x21d2 <H_Led_Void_LedOff+0x16>
    21c0:	83 30       	cpi	r24, 0x03	; 3
    21c2:	61 f0       	breq	.+24     	; 0x21dc <H_Led_Void_LedOff+0x20>
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	71 f4       	brne	.+28     	; 0x21e4 <H_Led_Void_LedOff+0x28>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,LOW);	break;
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    21d0:	08 95       	ret
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,LOW); 	break;
    21d2:	8f e1       	ldi	r24, 0x1F	; 31
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    21da:	08 95       	ret
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,LOW);	break;
    21dc:	8e e1       	ldi	r24, 0x1E	; 30
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    21e4:	08 95       	ret

000021e6 <H_Led_Void_LedOn>:
	}
}

void H_Led_Void_LedOn(u8 Local_Led_Pin)
{
	switch(Local_Led_Pin)
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	49 f0       	breq	.+18     	; 0x21fc <H_Led_Void_LedOn+0x16>
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	61 f0       	breq	.+24     	; 0x2206 <H_Led_Void_LedOn+0x20>
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	71 f4       	brne	.+28     	; 0x220e <H_Led_Void_LedOn+0x28>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,HIGH);	break;
    21f2:	80 e2       	ldi	r24, 0x20	; 32
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    21fa:	08 95       	ret
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,HIGH);	break;
    21fc:	8f e1       	ldi	r24, 0x1F	; 31
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2204:	08 95       	ret
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,HIGH);	break;
    2206:	8e e1       	ldi	r24, 0x1E	; 30
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    220e:	08 95       	ret

00002210 <H_Led_Void_LedBlink>:
	default:											break;
	}
}

void H_Led_Void_LedBlink(u8 Local_Led_Pin)
{
    2210:	1f 93       	push	r17
    2212:	18 2f       	mov	r17, r24
    2214:	28 e8       	ldi	r18, 0x88	; 136
    2216:	33 e1       	ldi	r19, 0x13	; 19
    2218:	40 e9       	ldi	r20, 0x90	; 144
    221a:	51 e0       	ldi	r21, 0x01	; 1
    221c:	ca 01       	movw	r24, r20
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <H_Led_Void_LedBlink+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	21 50       	subi	r18, 0x01	; 1
    2224:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	d1 f7       	brne	.-12     	; 0x221c <H_Led_Void_LedBlink+0xc>
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOn(Local_Led_Pin);
    2228:	81 2f       	mov	r24, r17
    222a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <H_Led_Void_LedOn>
    222e:	28 e8       	ldi	r18, 0x88	; 136
    2230:	33 e1       	ldi	r19, 0x13	; 19
    2232:	40 e9       	ldi	r20, 0x90	; 144
    2234:	51 e0       	ldi	r21, 0x01	; 1
    2236:	ca 01       	movw	r24, r20
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <H_Led_Void_LedBlink+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	21 50       	subi	r18, 0x01	; 1
    223e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	d1 f7       	brne	.-12     	; 0x2236 <H_Led_Void_LedBlink+0x26>
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOff(Local_Led_Pin);
    2242:	81 2f       	mov	r24, r17
    2244:	0e 94 de 10 	call	0x21bc	; 0x21bc <H_Led_Void_LedOff>
}
    2248:	1f 91       	pop	r17
    224a:	08 95       	ret

0000224c <H_Led_Void_LedInit>:



void H_Led_Void_LedInit(u8 Local_Led_Pin)
{
	switch(Local_Led_Pin)
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	49 f0       	breq	.+18     	; 0x2262 <H_Led_Void_LedInit+0x16>
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	61 f0       	breq	.+24     	; 0x226c <H_Led_Void_LedInit+0x20>
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	71 f4       	brne	.+28     	; 0x2274 <H_Led_Void_LedInit+0x28>
	{
	case BLU_LED:M_Dio_Void_PinMode(Blu_Led_Pin,OUTPUT);	break;
    2258:	80 e2       	ldi	r24, 0x20	; 32
    225a:	61 e0       	ldi	r22, 0x01	; 1
    225c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2260:	08 95       	ret
	case GRN_LED:M_Dio_Void_PinMode(Grn_Led_Pin,OUTPUT); 	break;
    2262:	8f e1       	ldi	r24, 0x1F	; 31
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    226a:	08 95       	ret
	case RED_LED:M_Dio_Void_PinMode(Red_Led_Pin,OUTPUT);	break;
    226c:	8e e1       	ldi	r24, 0x1E	; 30
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    2274:	08 95       	ret

00002276 <H_LCD_Void_LCDWriteCommand>:

#endif
	_delay_ms(5);
}
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    2276:	cf 92       	push	r12
    2278:	df 92       	push	r13
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	1f 93       	push	r17
    2280:	18 2f       	mov	r17, r24
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,LOW);
    2282:	8b e0       	ldi	r24, 0x0B	; 11
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Command >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    228a:	0f 2e       	mov	r0, r31
    228c:	fb e3       	ldi	r31, 0x3B	; 59
    228e:	cf 2e       	mov	r12, r31
    2290:	dd 24       	eor	r13, r13
    2292:	f0 2d       	mov	r31, r0
    2294:	f6 01       	movw	r30, r12
    2296:	90 81       	ld	r25, Z
    2298:	81 2f       	mov	r24, r17
    229a:	86 95       	lsr	r24
    229c:	88 77       	andi	r24, 0x78	; 120
    229e:	97 78       	andi	r25, 0x87	; 135
    22a0:	89 2b       	or	r24, r25
    22a2:	80 83       	st	Z, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    22a4:	8c e0       	ldi	r24, 0x0C	; 12
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    22ac:	0f 2e       	mov	r0, r31
    22ae:	f0 ea       	ldi	r31, 0xA0	; 160
    22b0:	ef 2e       	mov	r14, r31
    22b2:	ff e0       	ldi	r31, 0x0F	; 15
    22b4:	ff 2e       	mov	r15, r31
    22b6:	f0 2d       	mov	r31, r0
    22b8:	c7 01       	movw	r24, r14
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <H_LCD_Void_LCDWriteCommand+0x44>
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    22be:	8c e0       	ldi	r24, 0x0C	; 12
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    22c6:	c7 01       	movw	r24, r14
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <H_LCD_Void_LCDWriteCommand+0x52>
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Command << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    22cc:	f6 01       	movw	r30, r12
    22ce:	80 81       	ld	r24, Z
    22d0:	11 0f       	add	r17, r17
    22d2:	11 0f       	add	r17, r17
    22d4:	11 0f       	add	r17, r17
    22d6:	18 77       	andi	r17, 0x78	; 120
    22d8:	87 78       	andi	r24, 0x87	; 135
    22da:	18 2b       	or	r17, r24
    22dc:	10 83       	st	Z, r17
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    22de:	8c e0       	ldi	r24, 0x0C	; 12
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    22e6:	c7 01       	movw	r24, r14
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <H_LCD_Void_LCDWriteCommand+0x72>
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    22ec:	8c e0       	ldi	r24, 0x0C	; 12
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	9e e4       	ldi	r25, 0x4E	; 78
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <H_LCD_Void_LCDWriteCommand+0x82>

#endif
	_delay_ms(5);
}
    22fc:	1f 91       	pop	r17
    22fe:	ff 90       	pop	r15
    2300:	ef 90       	pop	r14
    2302:	df 90       	pop	r13
    2304:	cf 90       	pop	r12
    2306:	08 95       	ret

00002308 <H_LCD_Void_LCDClr>:
}


void H_LCD_Void_LCDClr(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
    230e:	80 e2       	ldi	r24, 0x20	; 32
    2310:	9e e4       	ldi	r25, 0x4E	; 78
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <H_LCD_Void_LCDClr+0xa>
	_delay_ms(5);
}
    2316:	08 95       	ret

00002318 <H_LCD_Void_LCDGoto>:
	}
}


void H_LCD_Void_LCDGoto(u8 Local_u8_Row,u8 Local_u8_Col)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <H_LCD_Void_LCDGoto+0x6>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Arr[2] = {LCD_1st_Row_command , LCD_2nd_Row_command};
    2322:	90 e8       	ldi	r25, 0x80	; 128
    2324:	99 83       	std	Y+1, r25	; 0x01
    2326:	90 ec       	ldi	r25, 0xC0	; 192
    2328:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
    232a:	fe 01       	movw	r30, r28
    232c:	e8 0f       	add	r30, r24
    232e:	f1 1d       	adc	r31, r1
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	86 0f       	add	r24, r22
    2334:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
	_delay_ms(5);
}
void H_LCD_Void_LCDWriteCharacter(u8 Local_u8_Character)
{
    2342:	cf 92       	push	r12
    2344:	df 92       	push	r13
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	1f 93       	push	r17
    234c:	18 2f       	mov	r17, r24
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,HIGH);
    234e:	8b e0       	ldi	r24, 0x0B	; 11
    2350:	61 e0       	ldi	r22, 0x01	; 1
    2352:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Character >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    2356:	0f 2e       	mov	r0, r31
    2358:	fb e3       	ldi	r31, 0x3B	; 59
    235a:	cf 2e       	mov	r12, r31
    235c:	dd 24       	eor	r13, r13
    235e:	f0 2d       	mov	r31, r0
    2360:	f6 01       	movw	r30, r12
    2362:	90 81       	ld	r25, Z
    2364:	81 2f       	mov	r24, r17
    2366:	86 95       	lsr	r24
    2368:	88 77       	andi	r24, 0x78	; 120
    236a:	97 78       	andi	r25, 0x87	; 135
    236c:	89 2b       	or	r24, r25
    236e:	80 83       	st	Z, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    2370:	8c e0       	ldi	r24, 0x0C	; 12
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2378:	0f 2e       	mov	r0, r31
    237a:	f0 ea       	ldi	r31, 0xA0	; 160
    237c:	ef 2e       	mov	r14, r31
    237e:	ff e0       	ldi	r31, 0x0F	; 15
    2380:	ff 2e       	mov	r15, r31
    2382:	f0 2d       	mov	r31, r0
    2384:	c7 01       	movw	r24, r14
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <H_LCD_Void_LCDWriteCharacter+0x44>
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    238a:	8c e0       	ldi	r24, 0x0C	; 12
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2392:	c7 01       	movw	r24, r14
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <H_LCD_Void_LCDWriteCharacter+0x52>
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Character << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    2398:	f6 01       	movw	r30, r12
    239a:	80 81       	ld	r24, Z
    239c:	11 0f       	add	r17, r17
    239e:	11 0f       	add	r17, r17
    23a0:	11 0f       	add	r17, r17
    23a2:	18 77       	andi	r17, 0x78	; 120
    23a4:	87 78       	andi	r24, 0x87	; 135
    23a6:	18 2b       	or	r17, r24
    23a8:	10 83       	st	Z, r17
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    23aa:	8c e0       	ldi	r24, 0x0C	; 12
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    23b2:	c7 01       	movw	r24, r14
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <H_LCD_Void_LCDWriteCharacter+0x72>
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    23b8:	8c e0       	ldi	r24, 0x0C	; 12
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    23c0:	80 e2       	ldi	r24, 0x20	; 32
    23c2:	9e e4       	ldi	r25, 0x4E	; 78
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <H_LCD_Void_LCDWriteCharacter+0x82>

#endif
	_delay_ms(5);
}
    23c8:	1f 91       	pop	r17
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	08 95       	ret

000023d4 <H_Lcd_Void_WriteDecimal>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
	_delay_ms(5);
}
void H_Lcd_Void_WriteDecimal(f32 Local_f32_float)
{
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	28 97       	sbiw	r28, 0x08	; 8
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	7b 01       	movw	r14, r22
    23fa:	8c 01       	movw	r16, r24
	u8 Local_u8_arr[4] = {0};
    23fc:	19 82       	std	Y+1, r1	; 0x01
    23fe:	1a 82       	std	Y+2, r1	; 0x02
    2400:	1b 82       	std	Y+3, r1	; 0x03
    2402:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8_arrf[4]={0};
	u16 local_u16_integer= (u16)Local_f32_float;
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	6b 01       	movw	r12, r22
	u16 Local_u16_fraction= (Local_f32_float-local_u16_integer)*10000;
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	c8 01       	movw	r24, r16
    2418:	b7 01       	movw	r22, r14
    241a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e4       	ldi	r19, 0x40	; 64
    2422:	4c e1       	ldi	r20, 0x1C	; 28
    2424:	56 e4       	ldi	r21, 0x46	; 70
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	5b 01       	movw	r10, r22
	s8 Local_s8_Counter = 0;
	s8 Local_s8_Counterf = 0;
	if(Local_f32_float<0)
    2430:	c8 01       	movw	r24, r16
    2432:	b7 01       	movw	r22, r14
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	1c f4       	brge	.+6      	; 0x244a <H_Lcd_Void_WriteDecimal+0x76>
	{
		H_LCD_Void_LCDWriteCharacter('-');
    2444:	8d e2       	ldi	r24, 0x2D	; 45
    2446:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
		Local_f32_float=Local_f32_float*(-1);
	}
	if (Local_u16_fraction==0)
    244a:	a1 14       	cp	r10, r1
    244c:	b1 04       	cpc	r11, r1
    244e:	29 f0       	breq	.+10     	; 0x245a <H_Lcd_Void_WriteDecimal+0x86>

			}while(Local_s8_Counter>=0);
	}
	else
	{
	while(local_u16_integer != 0)
    2450:	c1 14       	cp	r12, r1
    2452:	d1 04       	cpc	r13, r1
    2454:	c1 f5       	brne	.+112    	; 0x24c6 <H_Lcd_Void_WriteDecimal+0xf2>
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	53 c0       	rjmp	.+166    	; 0x2500 <H_Lcd_Void_WriteDecimal+0x12c>
		H_LCD_Void_LCDWriteCharacter('-');
		Local_f32_float=Local_f32_float*(-1);
	}
	if (Local_u16_fraction==0)
	{
		while(local_u16_integer!= 0)
    245a:	c1 14       	cp	r12, r1
    245c:	d1 04       	cpc	r13, r1
    245e:	11 f4       	brne	.+4      	; 0x2464 <H_Lcd_Void_WriteDecimal+0x90>
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	1d c0       	rjmp	.+58     	; 0x249e <H_Lcd_Void_WriteDecimal+0xca>
    2464:	40 e0       	ldi	r20, 0x00	; 0
			{

				Local_u8_arr[Local_s8_Counter] = local_u16_integer%10;
    2466:	8e 01       	movw	r16, r28
    2468:	0f 5f       	subi	r16, 0xFF	; 255
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	84 2f       	mov	r24, r20
    246e:	99 27       	eor	r25, r25
    2470:	87 fd       	sbrc	r24, 7
    2472:	90 95       	com	r25
    2474:	f8 01       	movw	r30, r16
    2476:	e8 0f       	add	r30, r24
    2478:	f9 1f       	adc	r31, r25
    247a:	c6 01       	movw	r24, r12
    247c:	6a e0       	ldi	r22, 0x0A	; 10
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    2484:	80 83       	st	Z, r24
				local_u16_integer = local_u16_integer/10;
    2486:	c6 01       	movw	r24, r12
    2488:	6a e0       	ldi	r22, 0x0A	; 10
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    2490:	86 2f       	mov	r24, r22
    2492:	97 2f       	mov	r25, r23
    2494:	6c 01       	movw	r12, r24
				Local_s8_Counter++;
    2496:	4f 5f       	subi	r20, 0xFF	; 255
		H_LCD_Void_LCDWriteCharacter('-');
		Local_f32_float=Local_f32_float*(-1);
	}
	if (Local_u16_fraction==0)
	{
		while(local_u16_integer!= 0)
    2498:	c1 14       	cp	r12, r1
    249a:	d1 04       	cpc	r13, r1
    249c:	39 f7       	brne	.-50     	; 0x246c <H_Lcd_Void_WriteDecimal+0x98>

				Local_u8_arr[Local_s8_Counter] = local_u16_integer%10;
				local_u16_integer = local_u16_integer/10;
				Local_s8_Counter++;
			}
				Local_s8_Counter--;
    249e:	e4 2e       	mov	r14, r20
    24a0:	ea 94       	dec	r14
			do
			{
				H_LCD_Void_LCDWriteCharacter(Local_u8_arr[Local_s8_Counter]+48);
    24a2:	6e 01       	movw	r12, r28
    24a4:	08 94       	sec
    24a6:	c1 1c       	adc	r12, r1
    24a8:	d1 1c       	adc	r13, r1
    24aa:	8e 2d       	mov	r24, r14
    24ac:	99 27       	eor	r25, r25
    24ae:	87 fd       	sbrc	r24, 7
    24b0:	90 95       	com	r25
    24b2:	f6 01       	movw	r30, r12
    24b4:	e8 0f       	add	r30, r24
    24b6:	f9 1f       	adc	r31, r25
    24b8:	80 81       	ld	r24, Z
    24ba:	80 5d       	subi	r24, 0xD0	; 208
    24bc:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
				Local_s8_Counter--;
    24c0:	ea 94       	dec	r14

			}while(Local_s8_Counter>=0);
    24c2:	9c f7       	brge	.-26     	; 0x24aa <H_Lcd_Void_WriteDecimal+0xd6>
    24c4:	6a c0       	rjmp	.+212    	; 0x259a <H_Lcd_Void_WriteDecimal+0x1c6>
    24c6:	40 e0       	ldi	r20, 0x00	; 0
	else
	{
	while(local_u16_integer != 0)
	{

		Local_u8_arr[Local_s8_Counter] = local_u16_integer % 10;
    24c8:	8e 01       	movw	r16, r28
    24ca:	0f 5f       	subi	r16, 0xFF	; 255
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	84 2f       	mov	r24, r20
    24d0:	99 27       	eor	r25, r25
    24d2:	87 fd       	sbrc	r24, 7
    24d4:	90 95       	com	r25
    24d6:	f8 01       	movw	r30, r16
    24d8:	e8 0f       	add	r30, r24
    24da:	f9 1f       	adc	r31, r25
    24dc:	c6 01       	movw	r24, r12
    24de:	6a e0       	ldi	r22, 0x0A	; 10
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    24e6:	80 83       	st	Z, r24
		//Local_f32_arr[Local_s8_Counter]= Local_u16_fraction % 10;
		local_u16_integer = local_u16_integer/10;
    24e8:	c6 01       	movw	r24, r12
    24ea:	6a e0       	ldi	r22, 0x0A	; 10
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    24f2:	86 2f       	mov	r24, r22
    24f4:	97 2f       	mov	r25, r23
    24f6:	6c 01       	movw	r12, r24
		Local_s8_Counter++;
    24f8:	4f 5f       	subi	r20, 0xFF	; 255

			}while(Local_s8_Counter>=0);
	}
	else
	{
	while(local_u16_integer != 0)
    24fa:	c1 14       	cp	r12, r1
    24fc:	d1 04       	cpc	r13, r1
    24fe:	39 f7       	brne	.-50     	; 0x24ce <H_Lcd_Void_WriteDecimal+0xfa>
	_delay_ms(5);
}
void H_Lcd_Void_WriteDecimal(f32 Local_f32_float)
{
	u8 Local_u8_arr[4] = {0};
	u8 Local_u8_arrf[4]={0};
    2500:	1d 82       	std	Y+5, r1	; 0x05
    2502:	1e 82       	std	Y+6, r1	; 0x06
    2504:	1f 82       	std	Y+7, r1	; 0x07
    2506:	18 86       	std	Y+8, r1	; 0x08
    2508:	10 e0       	ldi	r17, 0x00	; 0
	//Local_s8_Counter=0;
	while(Local_u16_fraction != 0)
	{

		//Local_u8_arr[Local_s8_Counter] = local_u8_integer % 10;
		Local_u8_arrf[Local_s8_Counterf]= Local_u16_fraction % 10;
    250a:	0f 2e       	mov	r0, r31
    250c:	f5 e0       	ldi	r31, 0x05	; 5
    250e:	cf 2e       	mov	r12, r31
    2510:	dd 24       	eor	r13, r13
    2512:	f0 2d       	mov	r31, r0
    2514:	cc 0e       	add	r12, r28
    2516:	dd 1e       	adc	r13, r29
    2518:	81 2f       	mov	r24, r17
    251a:	99 27       	eor	r25, r25
    251c:	87 fd       	sbrc	r24, 7
    251e:	90 95       	com	r25
    2520:	f6 01       	movw	r30, r12
    2522:	e8 0f       	add	r30, r24
    2524:	f9 1f       	adc	r31, r25
    2526:	c5 01       	movw	r24, r10
    2528:	6a e0       	ldi	r22, 0x0A	; 10
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    2530:	80 83       	st	Z, r24
		Local_u16_fraction = Local_u16_fraction/10;
    2532:	c5 01       	movw	r24, r10
    2534:	6a e0       	ldi	r22, 0x0A	; 10
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    253c:	86 2f       	mov	r24, r22
    253e:	97 2f       	mov	r25, r23
    2540:	5c 01       	movw	r10, r24
		Local_s8_Counterf++;
    2542:	1f 5f       	subi	r17, 0xFF	; 255
		//Local_f32_arr[Local_s8_Counter]= Local_u16_fraction % 10;
		local_u16_integer = local_u16_integer/10;
		Local_s8_Counter++;
	}
	//Local_s8_Counter=0;
	while(Local_u16_fraction != 0)
    2544:	a1 14       	cp	r10, r1
    2546:	b1 04       	cpc	r11, r1
    2548:	39 f7       	brne	.-50     	; 0x2518 <H_Lcd_Void_WriteDecimal+0x144>
		//Local_u8_arr[Local_s8_Counter] = local_u8_integer % 10;
		Local_u8_arrf[Local_s8_Counterf]= Local_u16_fraction % 10;
		Local_u16_fraction = Local_u16_fraction/10;
		Local_s8_Counterf++;
	}
	Local_s8_Counter--;
    254a:	e4 2e       	mov	r14, r20
    254c:	ea 94       	dec	r14
	do
	{
		H_LCD_Void_LCDWriteCharacter(Local_u8_arr[Local_s8_Counter]+48);
    254e:	6e 01       	movw	r12, r28
    2550:	08 94       	sec
    2552:	c1 1c       	adc	r12, r1
    2554:	d1 1c       	adc	r13, r1
    2556:	8e 2d       	mov	r24, r14
    2558:	99 27       	eor	r25, r25
    255a:	87 fd       	sbrc	r24, 7
    255c:	90 95       	com	r25
    255e:	f6 01       	movw	r30, r12
    2560:	e8 0f       	add	r30, r24
    2562:	f9 1f       	adc	r31, r25
    2564:	80 81       	ld	r24, Z
    2566:	80 5d       	subi	r24, 0xD0	; 208
    2568:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
		Local_s8_Counter--;
    256c:	ea 94       	dec	r14

	}while(Local_s8_Counter>=0);
    256e:	9c f7       	brge	.-26     	; 0x2556 <H_Lcd_Void_WriteDecimal+0x182>
	H_LCD_Void_LCDWriteCharacter('.');
    2570:	8e e2       	ldi	r24, 0x2E	; 46
    2572:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counterf--;
    2576:	e1 2e       	mov	r14, r17
    2578:	ea 94       	dec	r14
	do
		{
			H_LCD_Void_LCDWriteCharacter(Local_u8_arrf[Local_s8_Counterf]+48);
    257a:	8e 01       	movw	r16, r28
    257c:	0b 5f       	subi	r16, 0xFB	; 251
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	8e 2d       	mov	r24, r14
    2582:	99 27       	eor	r25, r25
    2584:	87 fd       	sbrc	r24, 7
    2586:	90 95       	com	r25
    2588:	f8 01       	movw	r30, r16
    258a:	e8 0f       	add	r30, r24
    258c:	f9 1f       	adc	r31, r25
    258e:	80 81       	ld	r24, Z
    2590:	80 5d       	subi	r24, 0xD0	; 208
    2592:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
			Local_s8_Counterf--;
    2596:	ea 94       	dec	r14

		}while(Local_s8_Counterf>=0);
    2598:	9c f7       	brge	.-26     	; 0x2580 <H_Lcd_Void_WriteDecimal+0x1ac>
}

}
    259a:	28 96       	adiw	r28, 0x08	; 8
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	bf 90       	pop	r11
    25b8:	af 90       	pop	r10
    25ba:	08 95       	ret

000025bc <H_LCD_Void_LCDWriteNumber>:
	Local_u8_Counter++;
	}
	_delay_ms(5);
}
void H_LCD_Void_LCDWriteNumber(f64 Local_f64_Number)
{
    25bc:	2f 92       	push	r2
    25be:	3f 92       	push	r3
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	2f 97       	sbiw	r28, 0x0f	; 15
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	1b 01       	movw	r2, r22
    25f0:	2c 01       	movw	r4, r24
	u8 Local_u8_IntArr[10] = {0};
    25f2:	fe 01       	movw	r30, r28
    25f4:	31 96       	adiw	r30, 0x01	; 1
    25f6:	8a e0       	ldi	r24, 0x0A	; 10
    25f8:	df 01       	movw	r26, r30
    25fa:	1d 92       	st	X+, r1
    25fc:	8a 95       	dec	r24
    25fe:	e9 f7       	brne	.-6      	; 0x25fa <H_LCD_Void_LCDWriteNumber+0x3e>
	u8 Local_u8_FloatArr[5] = {0};
	s8 Local_s8_Counter1 = 0;
	s8 Local_s8_Counter2 = 0;
	f64 Local_f64_FloatSector = 0;
	s32 Local_s32_IntSector = 0;
	if(Local_f64_Number == 0)H_LCD_Void_LCDWriteCharacter(48);
    2600:	c2 01       	movw	r24, r4
    2602:	b1 01       	movw	r22, r2
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2610:	88 23       	and	r24, r24
    2612:	19 f4       	brne	.+6      	; 0x261a <H_LCD_Void_LCDWriteNumber+0x5e>
    2614:	80 e3       	ldi	r24, 0x30	; 48
    2616:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	if(Local_f64_Number < 0)
    261a:	c2 01       	movw	r24, r4
    261c:	b1 01       	movw	r22, r2
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	3c f4       	brge	.+14     	; 0x263c <H_LCD_Void_LCDWriteNumber+0x80>
	{
		H_LCD_Void_LCDWriteCharacter('-');
    262e:	8d e2       	ldi	r24, 0x2D	; 45
    2630:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
		Local_f64_Number = Local_f64_Number * (-1);
    2634:	57 fa       	bst	r5, 7
    2636:	50 94       	com	r5
    2638:	57 f8       	bld	r5, 7
    263a:	50 94       	com	r5
	}
	Local_s32_IntSector = Local_f64_Number;
    263c:	c2 01       	movw	r24, r4
    263e:	b1 01       	movw	r22, r2
    2640:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2644:	3b 01       	movw	r6, r22
    2646:	4c 01       	movw	r8, r24
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
    2648:	61 15       	cp	r22, r1
    264a:	71 05       	cpc	r23, r1
    264c:	81 05       	cpc	r24, r1
    264e:	91 05       	cpc	r25, r1
    2650:	11 f4       	brne	.+4      	; 0x2656 <H_LCD_Void_LCDWriteNumber+0x9a>
    2652:	bb 24       	eor	r11, r11
    2654:	2b c0       	rjmp	.+86     	; 0x26ac <H_LCD_Void_LCDWriteNumber+0xf0>
    2656:	6b 01       	movw	r12, r22
    2658:	7c 01       	movw	r14, r24
    265a:	bb 24       	eor	r11, r11
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
    265c:	8b 2d       	mov	r24, r11
    265e:	99 27       	eor	r25, r25
    2660:	87 fd       	sbrc	r24, 7
    2662:	90 95       	com	r25
    2664:	01 e0       	ldi	r16, 0x01	; 1
    2666:	10 e0       	ldi	r17, 0x00	; 0
    2668:	0c 0f       	add	r16, r28
    266a:	1d 1f       	adc	r17, r29
    266c:	08 0f       	add	r16, r24
    266e:	19 1f       	adc	r17, r25
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__divmodsi4>
    2680:	f8 01       	movw	r30, r16
    2682:	60 83       	st	Z, r22
	Local_s32_IntSector = Local_s32_IntSector / 10;
    2684:	c7 01       	movw	r24, r14
    2686:	b6 01       	movw	r22, r12
    2688:	2a e0       	ldi	r18, 0x0A	; 10
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__divmodsi4>
    2694:	82 2f       	mov	r24, r18
    2696:	93 2f       	mov	r25, r19
    2698:	a4 2f       	mov	r26, r20
    269a:	b5 2f       	mov	r27, r21
    269c:	6c 01       	movw	r12, r24
    269e:	7d 01       	movw	r14, r26
	Local_s8_Counter1++;
    26a0:	b3 94       	inc	r11
	}
	Local_s32_IntSector = Local_f64_Number;
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
    26a2:	c1 14       	cp	r12, r1
    26a4:	d1 04       	cpc	r13, r1
    26a6:	e1 04       	cpc	r14, r1
    26a8:	f1 04       	cpc	r15, r1
    26aa:	c1 f6       	brne	.-80     	; 0x265c <H_LCD_Void_LCDWriteNumber+0xa0>
	_delay_ms(5);
}
void H_LCD_Void_LCDWriteNumber(f64 Local_f64_Number)
{
	u8 Local_u8_IntArr[10] = {0};
	u8 Local_u8_FloatArr[5] = {0};
    26ac:	8e 01       	movw	r16, r28
    26ae:	05 5f       	subi	r16, 0xF5	; 245
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	85 e0       	ldi	r24, 0x05	; 5
    26b4:	d8 01       	movw	r26, r16
    26b6:	1d 92       	st	X+, r1
    26b8:	8a 95       	dec	r24
    26ba:	e9 f7       	brne	.-6      	; 0x26b6 <H_LCD_Void_LCDWriteNumber+0xfa>
	{
		H_LCD_Void_LCDWriteCharacter('-');
		Local_f64_Number = Local_f64_Number * (-1);
	}
	Local_s32_IntSector = Local_f64_Number;
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;
    26bc:	c4 01       	movw	r24, r8
    26be:	b3 01       	movw	r22, r6
    26c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    26c4:	9b 01       	movw	r18, r22
    26c6:	ac 01       	movw	r20, r24
    26c8:	c2 01       	movw	r24, r4
    26ca:	b1 01       	movw	r22, r2
    26cc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
    26d0:	ba 94       	dec	r11
    26d2:	68 01       	movw	r12, r16
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
    26d4:	88 24       	eor	r8, r8
    26d6:	99 24       	eor	r9, r9
    26d8:	68 94       	set
    26da:	84 f8       	bld	r8, 4
    26dc:	8c 0e       	add	r8, r28
    26de:	9d 1e       	adc	r9, r29
	{

	Local_f64_FloatSector = Local_f64_FloatSector * 10;
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	7b 01       	movw	r14, r22
    26ee:	8c 01       	movw	r16, r24
	Local_u8_FloatArr[Local_s8_Counter2] = Local_f64_FloatSector;
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	f6 01       	movw	r30, r12
    26f6:	61 93       	st	Z+, r22
    26f8:	6f 01       	movw	r12, r30
	Local_s8_Counter2++;
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	88 27       	eor	r24, r24
    26fe:	77 fd       	sbrc	r23, 7
    2700:	80 95       	com	r24
    2702:	98 2f       	mov	r25, r24
    2704:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	c8 01       	movw	r24, r16
    270e:	b7 01       	movw	r22, r14
    2710:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
    2714:	c8 14       	cp	r12, r8
    2716:	d9 04       	cpc	r13, r9
    2718:	19 f7       	brne	.-58     	; 0x26e0 <H_LCD_Void_LCDWriteNumber+0x124>
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
    271a:	bb 20       	and	r11, r11
    271c:	8c f0       	brlt	.+34     	; 0x2740 <H_LCD_Void_LCDWriteNumber+0x184>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
    271e:	7e 01       	movw	r14, r28
    2720:	08 94       	sec
    2722:	e1 1c       	adc	r14, r1
    2724:	f1 1c       	adc	r15, r1
    2726:	8b 2d       	mov	r24, r11
    2728:	99 27       	eor	r25, r25
    272a:	87 fd       	sbrc	r24, 7
    272c:	90 95       	com	r25
    272e:	f7 01       	movw	r30, r14
    2730:	e8 0f       	add	r30, r24
    2732:	f9 1f       	adc	r31, r25
    2734:	80 81       	ld	r24, Z
    2736:	80 5d       	subi	r24, 0xD0	; 208
    2738:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter1--;
    273c:	ba 94       	dec	r11
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
    273e:	9c f7       	brge	.-26     	; 0x2726 <H_LCD_Void_LCDWriteNumber+0x16a>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
	Local_s8_Counter1--;
	}
	/*************************************WRITING_FLOAT_SECTION************************************/
	H_LCD_Void_LCDWriteCharacter('.');
    2740:	8e e2       	ldi	r24, 0x2E	; 46
    2742:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2 = 0;
	while(Local_s8_Counter2 < 4 )
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_FloatArr[Local_s8_Counter2] + 48);
    2746:	8b 85       	ldd	r24, Y+11	; 0x0b
    2748:	80 5d       	subi	r24, 0xD0	; 208
    274a:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
    274e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2750:	80 5d       	subi	r24, 0xD0	; 208
    2752:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	80 5d       	subi	r24, 0xD0	; 208
    275a:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
    275e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2760:	80 5d       	subi	r24, 0xD0	; 208
    2762:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2++;
	}
}
    2766:	2f 96       	adiw	r28, 0x0f	; 15
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	bf 90       	pop	r11
    2784:	9f 90       	pop	r9
    2786:	8f 90       	pop	r8
    2788:	7f 90       	pop	r7
    278a:	6f 90       	pop	r6
    278c:	5f 90       	pop	r5
    278e:	4f 90       	pop	r4
    2790:	3f 90       	pop	r3
    2792:	2f 90       	pop	r2
    2794:	08 95       	ret

00002796 <H_LCD_Void_LCDWriteString>:
	_delay_ms(5);
}


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	ec 01       	movw	r28, r24
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
    279e:	88 81       	ld	r24, Y
    27a0:	88 23       	and	r24, r24
    27a2:	51 f0       	breq	.+20     	; 0x27b8 <H_LCD_Void_LCDWriteString+0x22>
    27a4:	10 e0       	ldi	r17, 0x00	; 0
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
    27a6:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_Void_LCDWriteCharacter>
	Local_u8_Counter++;
    27aa:	1f 5f       	subi	r17, 0xFF	; 255


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
    27ac:	fe 01       	movw	r30, r28
    27ae:	e1 0f       	add	r30, r17
    27b0:	f1 1d       	adc	r31, r1
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	b9 f7       	brne	.-18     	; 0x27a6 <H_LCD_Void_LCDWriteString+0x10>
    27b8:	80 e2       	ldi	r24, 0x20	; 32
    27ba:	9e e4       	ldi	r25, 0x4E	; 78
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <H_LCD_Void_LCDWriteString+0x26>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
	Local_u8_Counter++;
	}
	_delay_ms(5);
}
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	08 95       	ret

000027c8 <H_LCD_Void_LCDInit>:
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_8_BIT_MODE_COMMAND);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinMode(LCD_DATA4_PIN,OUTPUT);
    27c8:	8d e0       	ldi	r24, 0x0D	; 13
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA5_PIN,OUTPUT);
    27d0:	8e e0       	ldi	r24, 0x0E	; 14
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA6_PIN,OUTPUT);
    27d8:	8f e0       	ldi	r24, 0x0F	; 15
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA7_PIN,OUTPUT);
    27e0:	80 e1       	ldi	r24, 0x10	; 16
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_EN_PIN,OUTPUT);
    27e8:	8c e0       	ldi	r24, 0x0C	; 12
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_RS_PIN,OUTPUT);
    27f0:	8b e0       	ldi	r24, 0x0B	; 11
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
    27f8:	20 e1       	ldi	r18, 0x10	; 16
    27fa:	37 e2       	ldi	r19, 0x27	; 39
    27fc:	40 e9       	ldi	r20, 0x90	; 144
    27fe:	51 e0       	ldi	r21, 0x01	; 1
    2800:	ca 01       	movw	r24, r20
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <H_LCD_Void_LCDInit+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	21 50       	subi	r18, 0x01	; 1
    2808:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	d1 f7       	brne	.-12     	; 0x2800 <H_LCD_Void_LCDInit+0x38>
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_1);
    280c:	83 e3       	ldi	r24, 0x33	; 51
    280e:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_2);
    2812:	82 e3       	ldi	r24, 0x32	; 50
    2814:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_3);
    2818:	88 e2       	ldi	r24, 0x28	; 40
    281a:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
#endif
	H_LCD_Void_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
    281e:	8c e0       	ldi	r24, 0x0C	; 12
    2820:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 3b 11 	call	0x2276	; 0x2276 <H_LCD_Void_LCDWriteCommand>
    2830:	80 e2       	ldi	r24, 0x20	; 32
    2832:	9e e4       	ldi	r25, 0x4E	; 78
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <H_LCD_Void_LCDInit+0x6c>
	_delay_ms(5);
}
    2838:	08 95       	ret

0000283a <H_KeyPad_U8_KeyPadRead>:
	M_Dio_Void_PinWrite(KEYPAD_R1_PIN,HIGH);
	M_Dio_Void_PinWrite(KEYPAD_R2_PIN,HIGH);
	M_Dio_Void_PinWrite(KEYPAD_R3_PIN,HIGH);
}
u8 H_KeyPad_U8_KeyPadRead(void)
{
    283a:	4f 92       	push	r4
    283c:	5f 92       	push	r5
    283e:	6f 92       	push	r6
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	60 97       	sbiw	r28, 0x10	; 16
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
#if KEY_PAD_MODE == CALCULATOR
	u8 Local_u8_Arr [4][4] = {{'1','2','3','+'},
							  {'4','5','6','-'},
	 	 	 	 	 	 	  {'7','8','9','*'},
	 	 	 	 	 	 	  {'.','0','=','/'}};
    286a:	de 01       	movw	r26, r28
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	e2 e0       	ldi	r30, 0x02	; 2
    2870:	f2 e0       	ldi	r31, 0x02	; 2
    2872:	80 e1       	ldi	r24, 0x10	; 16
    2874:	01 90       	ld	r0, Z+
    2876:	0d 92       	st	X+, r0
    2878:	81 50       	subi	r24, 0x01	; 1
    287a:	e1 f7       	brne	.-8      	; 0x2874 <H_KeyPad_U8_KeyPadRead+0x3a>
    287c:	77 24       	eor	r7, r7
    287e:	aa 24       	eor	r10, r10
    2880:	bb 24       	eor	r11, r11
	u8 Local_u8_ColCounter = 0;
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
    2882:	2e 01       	movw	r4, r28
    2884:	08 94       	sec
    2886:	41 1c       	adc	r4, r1
    2888:	51 1c       	adc	r5, r1
    288a:	0f 2e       	mov	r0, r31
    288c:	fa e2       	ldi	r31, 0x2A	; 42
    288e:	6f 2e       	mov	r6, r31
    2890:	f0 2d       	mov	r31, r0
    2892:	00 e9       	ldi	r16, 0x90	; 144
    2894:	11 e0       	ldi	r17, 0x01	; 1
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
		{
			if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    2896:	88 ee       	ldi	r24, 0xE8	; 232
    2898:	93 e0       	ldi	r25, 0x03	; 3
    289a:	98 2e       	mov	r9, r24
    289c:	89 2e       	mov	r8, r25
{
#if KEY_PAD_MODE == CALCULATOR
	u8 Local_u8_Arr [4][4] = {{'1','2','3','+'},
							  {'4','5','6','-'},
	 	 	 	 	 	 	  {'7','8','9','*'},
	 	 	 	 	 	 	  {'.','0','=','/'}};
    289e:	0f 2e       	mov	r0, r31
    28a0:	f8 e1       	ldi	r31, 0x18	; 24
    28a2:	ef 2e       	mov	r14, r31
    28a4:	f0 2d       	mov	r31, r0
    28a6:	ea 0c       	add	r14, r10
	u8 Local_u8_ColCounter = 0;
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
    28a8:	8e 2d       	mov	r24, r14
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    28b0:	c5 01       	movw	r24, r10
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	62 01       	movw	r12, r4
    28bc:	c8 0e       	add	r12, r24
    28be:	d9 1e       	adc	r13, r25
    28c0:	f6 2c       	mov	r15, r6
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
		{
			if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    28c2:	8f 2d       	mov	r24, r15
    28c4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    28c8:	88 23       	and	r24, r24
    28ca:	99 f4       	brne	.+38     	; 0x28f2 <H_KeyPad_U8_KeyPadRead+0xb8>
    28cc:	89 2d       	mov	r24, r9
    28ce:	98 2d       	mov	r25, r8
    28d0:	f8 01       	movw	r30, r16
    28d2:	31 97       	sbiw	r30, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <H_KeyPad_U8_KeyPadRead+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	d9 f7       	brne	.-10     	; 0x28d0 <H_KeyPad_U8_KeyPadRead+0x96>
			{
				_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
				if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    28da:	8f 2d       	mov	r24, r15
    28dc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    28e0:	88 23       	and	r24, r24
    28e2:	39 f4       	brne	.+14     	; 0x28f2 <H_KeyPad_U8_KeyPadRead+0xb8>
				{
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
    28e4:	8f 2d       	mov	r24, r15
    28e6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <M_Dio_U8_PinRead>
    28ea:	88 23       	and	r24, r24
    28ec:	d9 f3       	breq	.-10     	; 0x28e4 <H_KeyPad_U8_KeyPadRead+0xaa>
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
    28ee:	f6 01       	movw	r30, r12
    28f0:	70 80       	ld	r7, Z
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
    28f2:	f3 94       	inc	r15
    28f4:	08 94       	sec
    28f6:	c1 1c       	adc	r12, r1
    28f8:	d1 1c       	adc	r13, r1
    28fa:	fe e2       	ldi	r31, 0x2E	; 46
    28fc:	ff 16       	cp	r15, r31
    28fe:	09 f7       	brne	.-62     	; 0x28c2 <H_KeyPad_U8_KeyPadRead+0x88>
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
				}
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
    2900:	8e 2d       	mov	r24, r14
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
    2908:	08 94       	sec
    290a:	a1 1c       	adc	r10, r1
    290c:	b1 1c       	adc	r11, r1
	 	 	 	 	 	 	  {'*','0','#','D'}};
#endif
	u8 Local_u8_ColCounter = 0;
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
    290e:	84 e0       	ldi	r24, 0x04	; 4
    2910:	a8 16       	cp	r10, r24
    2912:	b1 04       	cpc	r11, r1
    2914:	21 f6       	brne	.-120    	; 0x289e <H_KeyPad_U8_KeyPadRead+0x64>
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
	}
	return Local_u8_Reading;
}
    2916:	87 2d       	mov	r24, r7
    2918:	60 96       	adiw	r28, 0x10	; 16
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	bf 90       	pop	r11
    2936:	af 90       	pop	r10
    2938:	9f 90       	pop	r9
    293a:	8f 90       	pop	r8
    293c:	7f 90       	pop	r7
    293e:	6f 90       	pop	r6
    2940:	5f 90       	pop	r5
    2942:	4f 90       	pop	r4
    2944:	08 95       	ret

00002946 <H_KeyPad_Void_KeyPadInit>:

#include"KeyPad.h"

void H_KeyPad_Void_KeyPadInit(void)
{
	M_Dio_Void_PinMode(KEYPAD_R0_PIN,OUTPUT);
    2946:	88 e1       	ldi	r24, 0x18	; 24
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R1_PIN,OUTPUT);
    294e:	89 e1       	ldi	r24, 0x19	; 25
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R2_PIN,OUTPUT);
    2956:	8a e1       	ldi	r24, 0x1A	; 26
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R3_PIN,OUTPUT);
    295e:	8b e1       	ldi	r24, 0x1B	; 27
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>

	M_Dio_Void_PinMode(KEYPAD_C0_PIN,INPUT);
    2966:	8a e2       	ldi	r24, 0x2A	; 42
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C1_PIN,INPUT);
    296e:	8b e2       	ldi	r24, 0x2B	; 43
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C2_PIN,INPUT);
    2976:	8c e2       	ldi	r24, 0x2C	; 44
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C3_PIN,INPUT);
    297e:	8d e2       	ldi	r24, 0x2D	; 45
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>

	M_Dio_Void_PinWrite(KEYPAD_R0_PIN,HIGH);
    2986:	88 e1       	ldi	r24, 0x18	; 24
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R1_PIN,HIGH);
    298e:	89 e1       	ldi	r24, 0x19	; 25
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R2_PIN,HIGH);
    2996:	8a e1       	ldi	r24, 0x1A	; 26
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R3_PIN,HIGH);
    299e:	8b e1       	ldi	r24, 0x1B	; 27
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
}
    29a6:	08 95       	ret

000029a8 <H_Buzzer_Void_BuzzerOff>:
	M_Dio_Void_PinWrite(Buzzer_Pin,HIGH);
 }

 void H_Buzzer_Void_BuzzerOff(void)
 {
	M_Dio_Void_PinWrite(Buzzer_Pin,LOW);
    29a8:	83 e2       	ldi	r24, 0x23	; 35
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
 }
    29b0:	08 95       	ret

000029b2 <H_Buzzer_Void_BuzzerOn>:
 }


 void H_Buzzer_Void_BuzzerOn(void)
 {
	M_Dio_Void_PinWrite(Buzzer_Pin,HIGH);
    29b2:	83 e2       	ldi	r24, 0x23	; 35
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_Dio_Void_PinWrite>
 }
    29ba:	08 95       	ret

000029bc <H_Buzzer_Void_BuzzerLong>:
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
 }
 void H_Buzzer_Void_BuzzerLong(void)
 {
	 H_Buzzer_Void_BuzzerOn();
    29bc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    29c0:	20 e5       	ldi	r18, 0x50	; 80
    29c2:	33 ec       	ldi	r19, 0xC3	; 195
    29c4:	40 e9       	ldi	r20, 0x90	; 144
    29c6:	51 e0       	ldi	r21, 0x01	; 1
    29c8:	ca 01       	movw	r24, r20
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <H_Buzzer_Void_BuzzerLong+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	21 50       	subi	r18, 0x01	; 1
    29d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	d1 f7       	brne	.-12     	; 0x29c8 <H_Buzzer_Void_BuzzerLong+0xc>
	 _delay_ms(10*BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    29d4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
 }
    29d8:	08 95       	ret

000029da <H_Buzzer_Void_BuzzerTriple>:
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
 }
 void H_Buzzer_Void_BuzzerTriple(void)
 {
	 H_Buzzer_Void_BuzzerOn();
    29da:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    29de:	28 e8       	ldi	r18, 0x88	; 136
    29e0:	33 e1       	ldi	r19, 0x13	; 19
    29e2:	40 e9       	ldi	r20, 0x90	; 144
    29e4:	51 e0       	ldi	r21, 0x01	; 1
    29e6:	ca 01       	movw	r24, r20
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <H_Buzzer_Void_BuzzerTriple+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	21 50       	subi	r18, 0x01	; 1
    29ee:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	d1 f7       	brne	.-12     	; 0x29e6 <H_Buzzer_Void_BuzzerTriple+0xc>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    29f2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
    29f6:	24 ec       	ldi	r18, 0xC4	; 196
    29f8:	39 e0       	ldi	r19, 0x09	; 9
    29fa:	40 e9       	ldi	r20, 0x90	; 144
    29fc:	51 e0       	ldi	r21, 0x01	; 1
    29fe:	ca 01       	movw	r24, r20
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <H_Buzzer_Void_BuzzerTriple+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	21 50       	subi	r18, 0x01	; 1
    2a06:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	d1 f7       	brne	.-12     	; 0x29fe <H_Buzzer_Void_BuzzerTriple+0x24>
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    2a0a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    2a0e:	28 e8       	ldi	r18, 0x88	; 136
    2a10:	33 e1       	ldi	r19, 0x13	; 19
    2a12:	40 e9       	ldi	r20, 0x90	; 144
    2a14:	51 e0       	ldi	r21, 0x01	; 1
    2a16:	ca 01       	movw	r24, r20
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <H_Buzzer_Void_BuzzerTriple+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	21 50       	subi	r18, 0x01	; 1
    2a1e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	d1 f7       	brne	.-12     	; 0x2a16 <H_Buzzer_Void_BuzzerTriple+0x3c>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    2a22:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
    2a26:	24 ec       	ldi	r18, 0xC4	; 196
    2a28:	39 e0       	ldi	r19, 0x09	; 9
    2a2a:	40 e9       	ldi	r20, 0x90	; 144
    2a2c:	51 e0       	ldi	r21, 0x01	; 1
    2a2e:	ca 01       	movw	r24, r20
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <H_Buzzer_Void_BuzzerTriple+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	21 50       	subi	r18, 0x01	; 1
    2a36:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	d1 f7       	brne	.-12     	; 0x2a2e <H_Buzzer_Void_BuzzerTriple+0x54>
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    2a3a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    2a3e:	28 e8       	ldi	r18, 0x88	; 136
    2a40:	33 e1       	ldi	r19, 0x13	; 19
    2a42:	40 e9       	ldi	r20, 0x90	; 144
    2a44:	51 e0       	ldi	r21, 0x01	; 1
    2a46:	ca 01       	movw	r24, r20
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <H_Buzzer_Void_BuzzerTriple+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	21 50       	subi	r18, 0x01	; 1
    2a4e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	d1 f7       	brne	.-12     	; 0x2a46 <H_Buzzer_Void_BuzzerTriple+0x6c>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    2a52:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
 }
    2a56:	08 95       	ret

00002a58 <H_Buzzer_Void_BuzzerTwice>:
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
 }
 void H_Buzzer_Void_BuzzerTwice(void)
 {
	 H_Buzzer_Void_BuzzerOn();
    2a58:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    2a5c:	28 e8       	ldi	r18, 0x88	; 136
    2a5e:	33 e1       	ldi	r19, 0x13	; 19
    2a60:	40 e9       	ldi	r20, 0x90	; 144
    2a62:	51 e0       	ldi	r21, 0x01	; 1
    2a64:	ca 01       	movw	r24, r20
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <H_Buzzer_Void_BuzzerTwice+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	21 50       	subi	r18, 0x01	; 1
    2a6c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	d1 f7       	brne	.-12     	; 0x2a64 <H_Buzzer_Void_BuzzerTwice+0xc>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    2a70:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
    2a74:	24 ec       	ldi	r18, 0xC4	; 196
    2a76:	39 e0       	ldi	r19, 0x09	; 9
    2a78:	40 e9       	ldi	r20, 0x90	; 144
    2a7a:	51 e0       	ldi	r21, 0x01	; 1
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <H_Buzzer_Void_BuzzerTwice+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	21 50       	subi	r18, 0x01	; 1
    2a84:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a86:	d1 f7       	brne	.-12     	; 0x2a7c <H_Buzzer_Void_BuzzerTwice+0x24>
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    2a88:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    2a8c:	28 e8       	ldi	r18, 0x88	; 136
    2a8e:	33 e1       	ldi	r19, 0x13	; 19
    2a90:	40 e9       	ldi	r20, 0x90	; 144
    2a92:	51 e0       	ldi	r21, 0x01	; 1
    2a94:	ca 01       	movw	r24, r20
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <H_Buzzer_Void_BuzzerTwice+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	21 50       	subi	r18, 0x01	; 1
    2a9c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	d1 f7       	brne	.-12     	; 0x2a94 <H_Buzzer_Void_BuzzerTwice+0x3c>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    2aa0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
 }
    2aa4:	08 95       	ret

00002aa6 <H_Buzzer_Void_BuzzerOnce>:
 {
	M_Dio_Void_PinWrite(Buzzer_Pin,LOW);
 }
 void H_Buzzer_Void_BuzzerOnce(void)
 {
	 H_Buzzer_Void_BuzzerOn();
    2aa6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <H_Buzzer_Void_BuzzerOn>
    2aaa:	28 e8       	ldi	r18, 0x88	; 136
    2aac:	33 e1       	ldi	r19, 0x13	; 19
    2aae:	40 e9       	ldi	r20, 0x90	; 144
    2ab0:	51 e0       	ldi	r21, 0x01	; 1
    2ab2:	ca 01       	movw	r24, r20
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <H_Buzzer_Void_BuzzerOnce+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab8:	21 50       	subi	r18, 0x01	; 1
    2aba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	d1 f7       	brne	.-12     	; 0x2ab2 <H_Buzzer_Void_BuzzerOnce+0xc>
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    2abe:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Buzzer_Void_BuzzerOff>
 }
    2ac2:	08 95       	ret

00002ac4 <H_Buzzer_Void_BuzzerInit>:

#include"Buzzer.h"

 void H_Buzzer_Void_BuzzerInit(void)
 {
	 M_Dio_Void_PinMode(Buzzer_Pin,OUTPUT);
    2ac4:	83 e2       	ldi	r24, 0x23	; 35
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
 }
    2acc:	08 95       	ret

00002ace <main>:
/*************************************************TIMER0_PROJECT******************************************************************************/


int main()
{
	H_LCD_Void_LCDInit();
    2ace:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <H_LCD_Void_LCDInit>


	H_KeyPad_Void_KeyPadInit();
    2ad2:	0e 94 a3 14 	call	0x2946	; 0x2946 <H_KeyPad_Void_KeyPadInit>


	PassWord();
    2ad6:	0e 94 44 08 	call	0x1088	; 0x1088 <PassWord>
	M_Timer0_Void_Init();
    2ada:	0e 94 74 09 	call	0x12e8	; 0x12e8 <M_Timer0_Void_Init>
	M_Dio_Void_PinMode(PB3_PIN,OUTPUT);
    2ade:	87 e1       	ldi	r24, 0x17	; 23
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <M_Dio_Void_PinMode>
	M_Timer0_Void_StartTimer();
    2ae6:	0e 94 80 09 	call	0x1300	; 0x1300 <M_Timer0_Void_StartTimer>
	H_SSD_Void_SSDInit();
    2aea:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <H_SSD_Void_SSDInit>
	M_ADC_Void_ADCInit();
    2aee:	0e 94 85 0c 	call	0x190a	; 0x190a <M_ADC_Void_ADCInit>

	while(1)
		{
		led_control();
    2af2:	0e 94 cb 07 	call	0xf96	; 0xf96 <led_control>
		Fan_Control();
    2af6:	0e 94 75 07 	call	0xeea	; 0xeea <Fan_Control>
    2afa:	fb cf       	rjmp	.-10     	; 0x2af2 <main+0x24>

00002afc <__udivmodqi4>:
    2afc:	99 1b       	sub	r25, r25
    2afe:	79 e0       	ldi	r23, 0x09	; 9
    2b00:	04 c0       	rjmp	.+8      	; 0x2b0a <__udivmodqi4_ep>

00002b02 <__udivmodqi4_loop>:
    2b02:	99 1f       	adc	r25, r25
    2b04:	96 17       	cp	r25, r22
    2b06:	08 f0       	brcs	.+2      	; 0x2b0a <__udivmodqi4_ep>
    2b08:	96 1b       	sub	r25, r22

00002b0a <__udivmodqi4_ep>:
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	7a 95       	dec	r23
    2b0e:	c9 f7       	brne	.-14     	; 0x2b02 <__udivmodqi4_loop>
    2b10:	80 95       	com	r24
    2b12:	08 95       	ret

00002b14 <__udivmodhi4>:
    2b14:	aa 1b       	sub	r26, r26
    2b16:	bb 1b       	sub	r27, r27
    2b18:	51 e1       	ldi	r21, 0x11	; 17
    2b1a:	07 c0       	rjmp	.+14     	; 0x2b2a <__udivmodhi4_ep>

00002b1c <__udivmodhi4_loop>:
    2b1c:	aa 1f       	adc	r26, r26
    2b1e:	bb 1f       	adc	r27, r27
    2b20:	a6 17       	cp	r26, r22
    2b22:	b7 07       	cpc	r27, r23
    2b24:	10 f0       	brcs	.+4      	; 0x2b2a <__udivmodhi4_ep>
    2b26:	a6 1b       	sub	r26, r22
    2b28:	b7 0b       	sbc	r27, r23

00002b2a <__udivmodhi4_ep>:
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	5a 95       	dec	r21
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__udivmodhi4_loop>
    2b32:	80 95       	com	r24
    2b34:	90 95       	com	r25
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	08 95       	ret

00002b3c <__divmodhi4>:
    2b3c:	97 fb       	bst	r25, 7
    2b3e:	09 2e       	mov	r0, r25
    2b40:	07 26       	eor	r0, r23
    2b42:	0a d0       	rcall	.+20     	; 0x2b58 <__divmodhi4_neg1>
    2b44:	77 fd       	sbrc	r23, 7
    2b46:	04 d0       	rcall	.+8      	; 0x2b50 <__divmodhi4_neg2>
    2b48:	e5 df       	rcall	.-54     	; 0x2b14 <__udivmodhi4>
    2b4a:	06 d0       	rcall	.+12     	; 0x2b58 <__divmodhi4_neg1>
    2b4c:	00 20       	and	r0, r0
    2b4e:	1a f4       	brpl	.+6      	; 0x2b56 <__divmodhi4_exit>

00002b50 <__divmodhi4_neg2>:
    2b50:	70 95       	com	r23
    2b52:	61 95       	neg	r22
    2b54:	7f 4f       	sbci	r23, 0xFF	; 255

00002b56 <__divmodhi4_exit>:
    2b56:	08 95       	ret

00002b58 <__divmodhi4_neg1>:
    2b58:	f6 f7       	brtc	.-4      	; 0x2b56 <__divmodhi4_exit>
    2b5a:	90 95       	com	r25
    2b5c:	81 95       	neg	r24
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	08 95       	ret

00002b62 <__divmodsi4>:
    2b62:	97 fb       	bst	r25, 7
    2b64:	09 2e       	mov	r0, r25
    2b66:	05 26       	eor	r0, r21
    2b68:	0e d0       	rcall	.+28     	; 0x2b86 <__divmodsi4_neg1>
    2b6a:	57 fd       	sbrc	r21, 7
    2b6c:	04 d0       	rcall	.+8      	; 0x2b76 <__divmodsi4_neg2>
    2b6e:	14 d0       	rcall	.+40     	; 0x2b98 <__udivmodsi4>
    2b70:	0a d0       	rcall	.+20     	; 0x2b86 <__divmodsi4_neg1>
    2b72:	00 1c       	adc	r0, r0
    2b74:	38 f4       	brcc	.+14     	; 0x2b84 <__divmodsi4_exit>

00002b76 <__divmodsi4_neg2>:
    2b76:	50 95       	com	r21
    2b78:	40 95       	com	r20
    2b7a:	30 95       	com	r19
    2b7c:	21 95       	neg	r18
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	4f 4f       	sbci	r20, 0xFF	; 255
    2b82:	5f 4f       	sbci	r21, 0xFF	; 255

00002b84 <__divmodsi4_exit>:
    2b84:	08 95       	ret

00002b86 <__divmodsi4_neg1>:
    2b86:	f6 f7       	brtc	.-4      	; 0x2b84 <__divmodsi4_exit>
    2b88:	90 95       	com	r25
    2b8a:	80 95       	com	r24
    2b8c:	70 95       	com	r23
    2b8e:	61 95       	neg	r22
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	08 95       	ret

00002b98 <__udivmodsi4>:
    2b98:	a1 e2       	ldi	r26, 0x21	; 33
    2b9a:	1a 2e       	mov	r1, r26
    2b9c:	aa 1b       	sub	r26, r26
    2b9e:	bb 1b       	sub	r27, r27
    2ba0:	fd 01       	movw	r30, r26
    2ba2:	0d c0       	rjmp	.+26     	; 0x2bbe <__udivmodsi4_ep>

00002ba4 <__udivmodsi4_loop>:
    2ba4:	aa 1f       	adc	r26, r26
    2ba6:	bb 1f       	adc	r27, r27
    2ba8:	ee 1f       	adc	r30, r30
    2baa:	ff 1f       	adc	r31, r31
    2bac:	a2 17       	cp	r26, r18
    2bae:	b3 07       	cpc	r27, r19
    2bb0:	e4 07       	cpc	r30, r20
    2bb2:	f5 07       	cpc	r31, r21
    2bb4:	20 f0       	brcs	.+8      	; 0x2bbe <__udivmodsi4_ep>
    2bb6:	a2 1b       	sub	r26, r18
    2bb8:	b3 0b       	sbc	r27, r19
    2bba:	e4 0b       	sbc	r30, r20
    2bbc:	f5 0b       	sbc	r31, r21

00002bbe <__udivmodsi4_ep>:
    2bbe:	66 1f       	adc	r22, r22
    2bc0:	77 1f       	adc	r23, r23
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	1a 94       	dec	r1
    2bc8:	69 f7       	brne	.-38     	; 0x2ba4 <__udivmodsi4_loop>
    2bca:	60 95       	com	r22
    2bcc:	70 95       	com	r23
    2bce:	80 95       	com	r24
    2bd0:	90 95       	com	r25
    2bd2:	9b 01       	movw	r18, r22
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	bd 01       	movw	r22, r26
    2bd8:	cf 01       	movw	r24, r30
    2bda:	08 95       	ret

00002bdc <__prologue_saves__>:
    2bdc:	2f 92       	push	r2
    2bde:	3f 92       	push	r3
    2be0:	4f 92       	push	r4
    2be2:	5f 92       	push	r5
    2be4:	6f 92       	push	r6
    2be6:	7f 92       	push	r7
    2be8:	8f 92       	push	r8
    2bea:	9f 92       	push	r9
    2bec:	af 92       	push	r10
    2bee:	bf 92       	push	r11
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	ca 1b       	sub	r28, r26
    2c06:	db 0b       	sbc	r29, r27
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	09 94       	ijmp

00002c14 <__epilogue_restores__>:
    2c14:	2a 88       	ldd	r2, Y+18	; 0x12
    2c16:	39 88       	ldd	r3, Y+17	; 0x11
    2c18:	48 88       	ldd	r4, Y+16	; 0x10
    2c1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c26:	b9 84       	ldd	r11, Y+9	; 0x09
    2c28:	c8 84       	ldd	r12, Y+8	; 0x08
    2c2a:	df 80       	ldd	r13, Y+7	; 0x07
    2c2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c30:	0c 81       	ldd	r16, Y+4	; 0x04
    2c32:	1b 81       	ldd	r17, Y+3	; 0x03
    2c34:	aa 81       	ldd	r26, Y+2	; 0x02
    2c36:	b9 81       	ldd	r27, Y+1	; 0x01
    2c38:	ce 0f       	add	r28, r30
    2c3a:	d1 1d       	adc	r29, r1
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	ed 01       	movw	r28, r26
    2c48:	08 95       	ret

00002c4a <_exit>:
    2c4a:	f8 94       	cli

00002c4c <__stop_program>:
    2c4c:	ff cf       	rjmp	.-2      	; 0x2c4c <__stop_program>
